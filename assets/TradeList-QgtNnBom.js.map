{"version":3,"file":"TradeList-QgtNnBom.js","sources":["../../src/components/ftbot/ForceExitForm.vue","../../src/components/ftbot/TradeActionsPopover.vue","../../src/components/ftbot/TradeList.vue"],"sourcesContent":["<template>\n  <div>\n    <b-modal\n      id=\"forceexit-modal\"\n      v-model=\"model\"\n      title=\"Force exiting a trade\"\n      @show=\"resetForm\"\n      @hidden=\"resetForm\"\n      @ok=\"handleEntry\"\n    >\n      <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\n        <p>\n          <span>Exiting Trade #{{ trade.trade_id }} {{ trade.pair }}.</span>\n          <br />\n          <span>Currently owning {{ trade.amount }} {{ trade.base_currency }}</span>\n        </p>\n        <b-form-group\n          :label=\"`*Amount in ${trade.base_currency} [optional]`\"\n          label-for=\"stake-input\"\n          invalid-feedback=\"Amount must be empty or a positive number\"\n          :state=\"amount !== undefined && amount > 0\"\n        >\n          <b-form-input\n            id=\"stake-input\"\n            v-model=\"amount\"\n            type=\"number\"\n            step=\"0.000001\"\n          ></b-form-input>\n          <b-form-input\n            id=\"stake-input\"\n            v-model=\"amount\"\n            type=\"range\"\n            step=\"0.000001\"\n            min=\"0\"\n            :max=\"trade.amount\"\n          ></b-form-input>\n        </b-form-group>\n\n        <b-form-group\n          label=\"*OrderType\"\n          label-for=\"ordertype-input\"\n          invalid-feedback=\"OrderType\"\n          :state=\"ordertype !== undefined\"\n        >\n          <b-form-select\n            v-model=\"ordertype\"\n            class=\"ms-2\"\n            :options=\"['market', 'limit']\"\n            style=\"min-width: 7em\"\n            size=\"sm\"\n          >\n          </b-form-select>\n        </b-form-group>\n      </form>\n    </b-modal>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ForceSellPayload, Trade } from '@/types';\n\nconst props = defineProps({\n  trade: {\n    type: Object as () => Trade,\n    required: true,\n  },\n  modelValue: { required: true, default: false, type: Boolean },\n});\nconst emit = defineEmits(['update:modelValue']);\nconst botStore = useBotStore();\n\nconst form = ref<HTMLFormElement>();\nconst amount = ref<number | undefined>(undefined);\nconst ordertype = ref('limit');\n\nconst checkFormValidity = () => {\n  const valid = form.value?.checkValidity();\n\n  return valid;\n};\n\nconst model = computed({\n  get() {\n    return props.modelValue;\n  },\n  set(value: boolean) {\n    emit('update:modelValue', value);\n  },\n});\n\nfunction handleSubmit() {\n  // Exit when the form isn't valid\n  if (!checkFormValidity()) {\n    return;\n  }\n  // call forceentry\n  const payload: ForceSellPayload = { tradeid: String(props.trade.trade_id) };\n\n  if (ordertype.value) {\n    payload.ordertype = ordertype.value;\n  }\n  if (amount.value) {\n    payload.amount = amount.value;\n  }\n  botStore.activeBot.forceexit(payload);\n  model.value = false;\n}\n\nfunction resetForm() {\n  amount.value = props.trade.amount;\n  ordertype.value =\n    botStore.activeBot.botState?.order_types?.force_exit ||\n    botStore.activeBot.botState?.order_types?.exit ||\n    'limit';\n}\n\nfunction handleEntry() {\n  // Trigger submit handler\n  handleSubmit();\n}\n</script>\n","<script setup lang=\"ts\">\nimport { Trade } from '@/types';\n\nimport TradeActions from './TradeActions.vue';\n\ndefineProps({\n  trade: { type: Object as () => Trade, required: true },\n  id: { type: Number, required: true },\n  botApiVersion: { type: Number, required: true },\n});\nconst emit = defineEmits([\n  'forceExit',\n  'forceExitPartial',\n  'cancelOpenOrder',\n  'reloadTrade',\n  'deleteTrade',\n]);\nconst popoverOpen = ref(false);\n\nfunction forceExitHandler(item: Trade, ordertype: string | undefined = undefined) {\n  popoverOpen.value = false;\n  emit('forceExit', item, ordertype);\n}\nfunction forceExitPartialHandler(item: Trade) {\n  popoverOpen.value = false;\n  emit('forceExitPartial', item);\n}\nfunction cancelOpenOrderHandler(item: Trade) {\n  popoverOpen.value = false;\n  emit('cancelOpenOrder', item);\n}\nfunction handleReloadTrade(item: Trade) {\n  popoverOpen.value = false;\n  emit('reloadTrade', item);\n}\n</script>\n\n<template>\n  <div>\n    <b-button\n      :id=\"`btn-actions-${id}`\"\n      class=\"btn-xs\"\n      size=\"sm\"\n      title=\"Actions\"\n      @click=\"popoverOpen = !popoverOpen\"\n    >\n      <i-mdi-gesture-tap />\n    </b-button>\n    <b-popover\n      container=\"body\"\n      :target=\"`btn-actions-${id}`\"\n      :title=\"`Actions for ${trade.pair}`\"\n      triggers=\"manual\"\n      :show=\"popoverOpen\"\n      placement=\"left\"\n    >\n      <trade-actions\n        :trade=\"trade\"\n        :bot-api-version=\"botApiVersion\"\n        @force-exit=\"forceExitHandler\"\n        @force-exit-partial=\"forceExitPartialHandler\"\n        @delete-trade=\"\n          popoverOpen = false;\n          $emit('deleteTrade', trade);\n        \"\n        @cancel-open-order=\"cancelOpenOrderHandler\"\n        @reload-trade=\"handleReloadTrade\"\n      />\n      <b-button class=\"mt-1 w-100 text-start\" size=\"sm\" @click=\"popoverOpen = false\">\n        <i-mdi-cancel class=\"me-1\" />Close Actions menu\n      </b-button>\n    </b-popover>\n  </div>\n</template>\n\n<style scoped></style>\n","<template>\n  <div class=\"h-100 overflow-auto w-100\">\n    <b-table\n      ref=\"tradesTable\"\n      small\n      hover\n      stacked=\"md\"\n      :items=\"\n        trades.filter(\n          (t) =>\n            t.pair.toLowerCase().includes(filterText.toLowerCase()) ||\n            t.exit_reason?.toLowerCase().includes(filterText.toLowerCase()) ||\n            t.enter_tag?.toLowerCase().includes(filterText.toLowerCase()),\n        ) as unknown as TableItem[]\n      \"\n      :fields=\"tableFields\"\n      show-empty\n      :empty-text=\"emptyText\"\n      :per-page=\"perPage\"\n      :current-page=\"currentPage\"\n      primary-key=\"botTradeId\"\n      selectable\n      :select-head=\"false\"\n      select-mode=\"single\"\n      @row-contextmenu=\"handleContextMenuEvent\"\n      @row-clicked=\"onRowClicked\"\n      @row-selected=\"onRowSelected\"\n    >\n      <template #cell(actions)=\"{ index, item }\">\n        <TradeActionsPopover\n          :id=\"index\"\n          :trade=\"item as unknown as Trade\"\n          :bot-api-version=\"botStore.activeBot.botApiVersion\"\n          @delete-trade=\"removeTradeHandler(item as unknown as Trade)\"\n          @force-exit=\"forceExitHandler\"\n          @force-exit-partial=\"forceExitPartialHandler\"\n          @cancel-open-order=\"cancelOpenOrderHandler\"\n          @reload-trade=\"reloadTradeHandler\"\n        />\n      </template>\n      <template #cell(pair)=\"row\">\n        <span>\n          {{ `${row.item.pair}${row.item.open_order_id || row.item.has_open_orders ? '*' : ''}` }}\n        </span>\n      </template>\n      <template #cell(trade_id)=\"row\">\n        {{ row.item.trade_id }}\n        {{\n          botStore.activeBot.botApiVersion > 2.0 && row.item.trading_mode !== 'spot'\n            ? '| ' + (row.item.is_short ? 'Short' : 'Long')\n            : ''\n        }}\n      </template>\n      <template #cell(stake_amount)=\"row\">\n        {{ formatPriceWithDecimals(row.item.stake_amount) }}\n        {{ row.item.trading_mode !== 'spot' ? `(${row.item.leverage}x)` : '' }}\n      </template>\n      <template #cell(profit)=\"row\">\n        <trade-profit :trade=\"row.item as unknown as Trade\" />\n      </template>\n      <template #cell(open_timestamp)=\"row\">\n        <DateTimeTZ :date=\"(row.item as unknown as Trade).open_timestamp\" />\n      </template>\n      <template #cell(close_timestamp)=\"row\">\n        <DateTimeTZ :date=\"(row.item as unknown as Trade).close_timestamp ?? 0\" />\n      </template>\n    </b-table>\n    <div class=\"w-100 d-flex justify-content-between\">\n      <b-pagination\n        v-if=\"!activeTrades\"\n        v-model=\"currentPage\"\n        :total-rows=\"rows\"\n        :per-page=\"perPage\"\n        aria-controls=\"my-table\"\n      ></b-pagination>\n      <b-form-group v-if=\"showFilter\" label-for=\"trade-filter\">\n        <b-form-input id=\"trade-filter\" v-model=\"filterText\" type=\"text\" placeholder=\"Filter\" />\n      </b-form-group>\n    </div>\n    <force-exit-form v-if=\"activeTrades\" v-model=\"forceExitVisible\" :trade=\"feTrade\" />\n    <b-modal v-model=\"removeTradeVisible\" title=\"Exit trade\" @ok=\"forceExitExecuter\">\n      {{ confirmExitText }}\n    </b-modal>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { formatPercent, formatPrice } from '@/shared/formatters';\nimport { MultiDeletePayload, MultiForcesellPayload, Trade } from '@/types';\n\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { useRouter } from 'vue-router';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\n\nenum ModalReasons {\n  removeTrade,\n  forceExit,\n  forceExitPartial,\n  cancelOpenOrder,\n}\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Array<Trade> },\n  title: { default: 'Trades', type: String },\n  stakeCurrency: { required: false, default: '', type: String },\n  activeTrades: { default: false, type: Boolean },\n  showFilter: { default: false, type: Boolean },\n  multiBotView: { default: false, type: Boolean },\n  emptyText: { default: 'No Trades to show.', type: String },\n});\nconst botStore = useBotStore();\nconst router = useRouter();\nconst settingsStore = useSettingsStore();\nconst currentPage = ref(1);\nconst selectedItemIndex = ref();\nconst filterText = ref('');\nconst feTrade = ref<Trade>({} as Trade);\nconst perPage = props.activeTrades ? 200 : 15;\nconst tradesTable = ref<HTMLFormElement>();\nconst forceExitVisible = ref(false);\nconst removeTradeVisible = ref(false);\nconst confirmExitText = ref('');\nconst confirmExitValue = ref<ModalReasons | null>(null);\n\nconst openFields: TableField[] = [{ key: 'actions' }];\nconst closedFields: TableField[] = [\n  { key: 'close_timestamp', label: 'Close date' },\n  { key: 'exit_reason', label: 'Close Reason' },\n];\nfunction formatPriceWithDecimals(price) {\n  return formatPrice(price, botStore.activeBot.stakeCurrencyDecimals);\n}\nconst rows = computed(() => {\n  return props.trades.length;\n});\n\n// This using \"TableField[]\" below causes\n// Error: Debug Failure. No error for last overload signature\nconst tableFields = ref<any[]>([]);\n\nonMounted(() => {\n  tableFields.value = [\n    { key: 'trade_id', label: 'ID' },\n    { key: 'pair', label: 'Pair' },\n    { key: 'amount', label: 'Amount' },\n    {\n      key: 'stake_amount',\n      label: 'Stake amount',\n    },\n    {\n      key: 'open_rate',\n      label: 'Open rate',\n      formatter: (value: unknown) => formatPrice(value as number),\n    },\n    {\n      key: props.activeTrades ? 'current_rate' : 'close_rate',\n      label: props.activeTrades ? 'Current rate' : 'Close rate',\n      formatter: (value: unknown) => formatPrice(value as number),\n    },\n    {\n      key: 'profit',\n      label: props.activeTrades ? 'Current profit %' : 'Profit %',\n      formatter: (value: unknown, key?: string, item?: unknown) => {\n        if (!item) {\n          return '';\n        }\n        const typedItem = item as Trade;\n        const percent = formatPercent(typedItem.profit_ratio, 2);\n        return `${percent} ${`(${formatPriceWithDecimals(typedItem.profit_abs)})`}`;\n      },\n    },\n    { key: 'open_timestamp', label: 'Open date' },\n    ...(props.activeTrades ? openFields : closedFields),\n  ];\n  if (props.multiBotView) {\n    tableFields.value.unshift({ key: 'botName', label: 'Bot' });\n  }\n});\n\nconst feOrderType = ref<string | undefined>(undefined);\nfunction forceExitHandler(item: Trade, ordertype: string | undefined = undefined) {\n  feTrade.value = item;\n  confirmExitValue.value = ModalReasons.forceExit;\n  confirmExitText.value = `Really exit trade ${item.trade_id} (Pair ${item.pair}) using ${ordertype} Order?`;\n  feOrderType.value = ordertype;\n  if (settingsStore.confirmDialog === true) {\n    removeTradeVisible.value = true;\n  } else {\n    forceExitExecuter();\n  }\n}\n\nfunction forceExitExecuter() {\n  if (confirmExitValue.value === ModalReasons.removeTrade) {\n    const payload: MultiDeletePayload = {\n      tradeid: String(feTrade.value.trade_id),\n      botId: feTrade.value.botId,\n    };\n    botStore.deleteTradeMulti(payload).catch((error) => console.log(error.response));\n  }\n  if (confirmExitValue.value === ModalReasons.forceExit) {\n    const payload: MultiForcesellPayload = {\n      tradeid: String(feTrade.value.trade_id),\n      botId: feTrade.value.botId,\n    };\n    if (feOrderType.value) {\n      payload.ordertype = feOrderType.value;\n    }\n    botStore\n      .forceSellMulti(payload)\n      .then((xxx) => console.log(xxx))\n      .catch((error) => console.log(error.response));\n  }\n  if (confirmExitValue.value === ModalReasons.cancelOpenOrder) {\n    const payload: MultiDeletePayload = {\n      tradeid: String(feTrade.value.trade_id),\n      botId: feTrade.value.botId,\n    };\n    botStore.cancelOpenOrderMulti(payload);\n  }\n\n  feOrderType.value = undefined;\n  removeTradeVisible.value = false;\n}\n\nfunction removeTradeHandler(item: Trade) {\n  confirmExitText.value = `Really delete trade ${item.trade_id} (Pair ${item.pair})?`;\n  confirmExitValue.value = ModalReasons.removeTrade;\n  feTrade.value = item;\n  removeTradeVisible.value = true;\n}\n\nfunction forceExitPartialHandler(item: Trade) {\n  feTrade.value = item;\n  forceExitVisible.value = true;\n}\n\nfunction cancelOpenOrderHandler(item: Trade) {\n  confirmExitText.value = `Cancel open order for trade ${item.trade_id} (Pair ${item.pair})?`;\n  feTrade.value = item;\n  confirmExitValue.value = ModalReasons.cancelOpenOrder;\n  removeTradeVisible.value = true;\n}\n\nfunction reloadTradeHandler(item: Trade) {\n  botStore.reloadTradeMulti({ tradeid: String(item.trade_id), botId: item.botId });\n}\n\nfunction handleContextMenuEvent(item, index, event) {\n  // stop browser context menu from appearing\n  if (!props.activeTrades) {\n    return;\n  }\n  event.preventDefault();\n  // log the selected item to the console\n  console.log(item);\n}\n\nconst onRowClicked = (item) => {\n  if (props.multiBotView && botStore.selectedBot !== item.botId) {\n    // Multibotview - on click switch to the bot trade view\n    botStore.selectBot(item.botId);\n  }\n  if (item && item.trade_id !== botStore.activeBot.detailTradeId) {\n    botStore.activeBot.setDetailTrade(item);\n    if (props.multiBotView) {\n      router.push({ name: 'Freqtrade Trading' });\n    }\n  } else {\n    botStore.activeBot.setDetailTrade(null);\n  }\n};\n\nconst onRowSelected = () => {\n  if (botStore.activeBot.detailTradeId) {\n    const itemIndex = props.trades.findIndex(\n      (v) => v.trade_id === botStore.activeBot.detailTradeId,\n    );\n    if (itemIndex >= 0) {\n      tradesTable.value?.selectRow(itemIndex);\n    } else {\n      console.log(`Unsetting item for tradeid ${selectedItemIndex.value}`);\n      selectedItemIndex.value = undefined;\n    }\n  }\n};\n\nwatch(\n  () => botStore.activeBot.detailTradeId,\n  (val) => {\n    const index = props.trades.findIndex((v) => v.trade_id === val);\n    // Unselect when another tradeTable is selected!\n    if (index < 0) {\n      tradesTable.value?.clearSelected();\n    }\n  },\n);\n</script>\n\n<style lang=\"scss\" scoped>\n.card-body {\n  padding: 0 0.2em;\n}\n.table-sm {\n  font-size: $fontsize-small;\n}\n.btn-xs {\n  padding: 0.1rem 0.25rem;\n  font-size: 0.75rem;\n}\n</style>\n"],"names":["props","__props","emit","__emit","botStore","useBotStore","form","ref","amount","ordertype","checkFormValidity","_a","model","computed","value","handleSubmit","payload","resetForm","_b","_d","_c","handleEntry","popoverOpen","forceExitHandler","item","forceExitPartialHandler","cancelOpenOrderHandler","handleReloadTrade","router","useRouter","settingsStore","useSettingsStore","currentPage","selectedItemIndex","filterText","feTrade","perPage","tradesTable","forceExitVisible","removeTradeVisible","confirmExitText","confirmExitValue","openFields","closedFields","formatPriceWithDecimals","price","formatPrice","rows","tableFields","onMounted","key","typedItem","formatPercent","feOrderType","forceExitExecuter","error","xxx","removeTradeHandler","reloadTradeHandler","handleContextMenuEvent","index","event","onRowClicked","onRowSelected","itemIndex","v","watch","val"],"mappings":"mjBA8DA,MAAMA,EAAQC,EAORC,EAAOC,EACPC,EAAWC,IAEXC,EAAOC,IACPC,EAASD,EAAwB,MAAS,EAC1CE,EAAYF,EAAI,OAAO,EAEvBG,EAAoB,IAAM,OAGvB,OAFOC,EAAAL,EAAK,QAAL,YAAAK,EAAY,eAEnB,EAGHC,EAAQC,EAAS,CACrB,KAAM,CACJ,OAAOb,EAAM,UACf,EACA,IAAIc,EAAgB,CAClBZ,EAAK,oBAAqBY,CAAK,CACjC,CAAA,CACD,EAED,SAASC,GAAe,CAElB,GAAA,CAACL,IACH,OAGF,MAAMM,EAA4B,CAAE,QAAS,OAAOhB,EAAM,MAAM,QAAQ,GAEpES,EAAU,QACZO,EAAQ,UAAYP,EAAU,OAE5BD,EAAO,QACTQ,EAAQ,OAASR,EAAO,OAEjBJ,EAAA,UAAU,UAAUY,CAAO,EACpCJ,EAAM,MAAQ,EAChB,CAEA,SAASK,GAAY,aACZT,EAAA,MAAQR,EAAM,MAAM,OACjBS,EAAA,QACRS,GAAAP,EAAAP,EAAS,UAAU,WAAnB,YAAAO,EAA6B,cAA7B,YAAAO,EAA0C,eAC1CC,GAAAC,EAAAhB,EAAS,UAAU,WAAnB,YAAAgB,EAA6B,cAA7B,YAAAD,EAA0C,OAC1C,OACJ,CAEA,SAASE,GAAc,CAERN,GACf,wrKC9GA,MAAMb,EAAOC,EAOPmB,EAAcf,EAAI,EAAK,EAEpB,SAAAgB,EAAiBC,EAAaf,EAAgC,OAAW,CAChFa,EAAY,MAAQ,GACfpB,EAAA,YAAasB,EAAMf,CAAS,CACnC,CACA,SAASgB,EAAwBD,EAAa,CAC5CF,EAAY,MAAQ,GACpBpB,EAAK,mBAAoBsB,CAAI,CAC/B,CACA,SAASE,EAAuBF,EAAa,CAC3CF,EAAY,MAAQ,GACpBpB,EAAK,kBAAmBsB,CAAI,CAC9B,CACA,SAASG,EAAkBH,EAAa,CACtCF,EAAY,MAAQ,GACpBpB,EAAK,cAAesB,CAAI,CAC1B,wrCCoEA,MAAMxB,EAAQC,EASRG,EAAWC,IACXuB,EAASC,KACTC,EAAgBC,KAChBC,EAAczB,EAAI,CAAC,EACnB0B,EAAoB1B,IACpB2B,EAAa3B,EAAI,EAAE,EACnB4B,EAAU5B,EAAW,CAAA,CAAW,EAChC6B,EAAUpC,EAAM,aAAe,IAAM,GACrCqC,EAAc9B,IACd+B,EAAmB/B,EAAI,EAAK,EAC5BgC,EAAqBhC,EAAI,EAAK,EAC9BiC,EAAkBjC,EAAI,EAAE,EACxBkC,EAAmBlC,EAAyB,IAAI,EAEhDmC,EAA2B,CAAC,CAAE,IAAK,SAAW,CAAA,EAC9CC,EAA6B,CACjC,CAAE,IAAK,kBAAmB,MAAO,YAAa,EAC9C,CAAE,IAAK,cAAe,MAAO,cAAe,CAAA,EAE9C,SAASC,EAAwBC,EAAO,CACtC,OAAOC,EAAYD,EAAOzC,EAAS,UAAU,qBAAqB,CACpE,CACM,MAAA2C,EAAOlC,EAAS,IACbb,EAAM,OAAO,MACrB,EAIKgD,EAAczC,EAAW,CAAA,CAAE,EAEjC0C,GAAU,IAAM,CACdD,EAAY,MAAQ,CAClB,CAAE,IAAK,WAAY,MAAO,IAAK,EAC/B,CAAE,IAAK,OAAQ,MAAO,MAAO,EAC7B,CAAE,IAAK,SAAU,MAAO,QAAS,EACjC,CACE,IAAK,eACL,MAAO,cACT,EACA,CACE,IAAK,YACL,MAAO,YACP,UAAYlC,GAAmBgC,EAAYhC,CAAe,CAC5D,EACA,CACE,IAAKd,EAAM,aAAe,eAAiB,aAC3C,MAAOA,EAAM,aAAe,eAAiB,aAC7C,UAAYc,GAAmBgC,EAAYhC,CAAe,CAC5D,EACA,CACE,IAAK,SACL,MAAOd,EAAM,aAAe,mBAAqB,WACjD,UAAW,CAACc,EAAgBoC,EAAc1B,IAAmB,CAC3D,GAAI,CAACA,EACI,MAAA,GAET,MAAM2B,EAAY3B,EAEX,MAAA,GADS4B,GAAcD,EAAU,aAAc,CAAC,CACtC,IAAI,IAAIP,EAAwBO,EAAU,UAAU,CAAC,GAAG,EAC3E,CACF,EACA,CAAE,IAAK,iBAAkB,MAAO,WAAY,EAC5C,GAAInD,EAAM,aAAe0C,EAAaC,CAAA,EAEpC3C,EAAM,cACRgD,EAAY,MAAM,QAAQ,CAAE,IAAK,UAAW,MAAO,MAAO,CAC5D,CACD,EAEK,MAAAK,EAAc9C,EAAwB,MAAS,EAC5C,SAAAgB,EAAiBC,EAAaf,EAAgC,OAAW,CAChF0B,EAAQ,MAAQX,EAChBiB,EAAiB,MAAQ,EACTD,EAAA,MAAQ,qBAAqBhB,EAAK,QAAQ,UAAUA,EAAK,IAAI,WAAWf,CAAS,UACjG4C,EAAY,MAAQ5C,EAChBqB,EAAc,gBAAkB,GAClCS,EAAmB,MAAQ,GAETe,GAEtB,CAEA,SAASA,GAAoB,CACvB,GAAAb,EAAiB,QAAU,EAA0B,CACvD,MAAMzB,EAA8B,CAClC,QAAS,OAAOmB,EAAQ,MAAM,QAAQ,EACtC,MAAOA,EAAQ,MAAM,KAAA,EAEd/B,EAAA,iBAAiBY,CAAO,EAAE,MAAOuC,GAAU,QAAQ,IAAIA,EAAM,QAAQ,CAAC,CACjF,CACI,GAAAd,EAAiB,QAAU,EAAwB,CACrD,MAAMzB,EAAiC,CACrC,QAAS,OAAOmB,EAAQ,MAAM,QAAQ,EACtC,MAAOA,EAAQ,MAAM,KAAA,EAEnBkB,EAAY,QACdrC,EAAQ,UAAYqC,EAAY,OAElCjD,EACG,eAAeY,CAAO,EACtB,KAAMwC,GAAQ,QAAQ,IAAIA,CAAG,CAAC,EAC9B,MAAOD,GAAU,QAAQ,IAAIA,EAAM,QAAQ,CAAC,CACjD,CACI,GAAAd,EAAiB,QAAU,EAA8B,CAC3D,MAAMzB,EAA8B,CAClC,QAAS,OAAOmB,EAAQ,MAAM,QAAQ,EACtC,MAAOA,EAAQ,MAAM,KAAA,EAEvB/B,EAAS,qBAAqBY,CAAO,CACvC,CAEAqC,EAAY,MAAQ,OACpBd,EAAmB,MAAQ,EAC7B,CAEA,SAASkB,EAAmBjC,EAAa,CACvCgB,EAAgB,MAAQ,uBAAuBhB,EAAK,QAAQ,UAAUA,EAAK,IAAI,KAC/EiB,EAAiB,MAAQ,EACzBN,EAAQ,MAAQX,EAChBe,EAAmB,MAAQ,EAC7B,CAEA,SAASd,EAAwBD,EAAa,CAC5CW,EAAQ,MAAQX,EAChBc,EAAiB,MAAQ,EAC3B,CAEA,SAASZ,GAAuBF,EAAa,CAC3CgB,EAAgB,MAAQ,+BAA+BhB,EAAK,QAAQ,UAAUA,EAAK,IAAI,KACvFW,EAAQ,MAAQX,EAChBiB,EAAiB,MAAQ,EACzBF,EAAmB,MAAQ,EAC7B,CAEA,SAASmB,GAAmBlC,EAAa,CAC9BpB,EAAA,iBAAiB,CAAE,QAAS,OAAOoB,EAAK,QAAQ,EAAG,MAAOA,EAAK,KAAO,CAAA,CACjF,CAES,SAAAmC,GAAuBnC,EAAMoC,EAAOC,EAAO,CAE7C7D,EAAM,eAGX6D,EAAM,eAAe,EAErB,QAAQ,IAAIrC,CAAI,EAClB,CAEM,MAAAsC,GAAgBtC,GAAS,CACzBxB,EAAM,cAAgBI,EAAS,cAAgBoB,EAAK,OAE7CpB,EAAA,UAAUoB,EAAK,KAAK,EAE3BA,GAAQA,EAAK,WAAapB,EAAS,UAAU,eACtCA,EAAA,UAAU,eAAeoB,CAAI,EAClCxB,EAAM,cACR4B,EAAO,KAAK,CAAE,KAAM,mBAAqB,CAAA,GAGlCxB,EAAA,UAAU,eAAe,IAAI,CACxC,EAGI2D,GAAgB,IAAM,OACtB,GAAA3D,EAAS,UAAU,cAAe,CAC9B,MAAA4D,EAAYhE,EAAM,OAAO,UAC5BiE,GAAMA,EAAE,WAAa7D,EAAS,UAAU,aAAA,EAEvC4D,GAAa,GACHrD,EAAA0B,EAAA,QAAA,MAAA1B,EAAO,UAAUqD,IAE7B,QAAQ,IAAI,8BAA8B/B,EAAkB,KAAK,EAAE,EACnEA,EAAkB,MAAQ,OAE9B,CAAA,EAGF,OAAAiC,GACE,IAAM9D,EAAS,UAAU,cACxB+D,GAAQ,OACOnE,EAAM,OAAO,UAAWiE,GAAMA,EAAE,WAAaE,CAAG,EAElD,KACVxD,EAAA0B,EAAY,QAAZ,MAAA1B,EAAmB,gBAEvB,CAAA"}