{"version":3,"file":"BacktestingView-f88f0143.js","sources":["../../src/components/ftbot/BacktestResultView.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid px-0 backtestresult-container\">\n    <div class=\"row d-flex justify-content-center\">\n      <h3>Backtest-result for {{ backtestResult.strategy_name }}</h3>\n    </div>\n\n    <div class=\"row text-start ms-0\">\n      <div class=\"row w-100\">\n        <div class=\"col-12 col-xl-6 px-0 px-xl-0 pe-xl-1\">\n          <b-card header=\"Strategy settings\">\n            <b-table\n              small\n              borderless\n              :items=\"backtestResultSettings\"\n              :fields=\"backtestsettingFields\"\n            >\n            </b-table>\n          </b-card>\n        </div>\n        <div class=\"col-12 col-xl-6 px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1\">\n          <b-card header=\"Metrics\">\n            <b-table small borderless :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\n            </b-table>\n          </b-card>\n        </div>\n      </div>\n      <b-card header=\"Results per Exit-reason\" class=\"row mt-2 w-100\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"(backtestResult.exit_reason_summary || backtestResult.sell_reason_summary) as unknown as TableItem[]\"\n          :fields=\"perExitReason\"\n        >\n        </b-table>\n      </b-card>\n      <b-card header=\"Results per pair\" class=\"row mt-2 w-100\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"backtestResult.results_per_pair as unknown as TableItem[]\"\n          :fields=\"perPairFields\"\n        >\n        </b-table>\n      </b-card>\n\n      <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n        <TradeList\n          class=\"row trade-history mt-2 w-100\"\n          :trades=\"backtestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"backtestResult.stake_currency\"\n        />\n      </b-card>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport { StrategyBacktestResult, Trade } from '@/types';\n\nimport { computed } from 'vue';\nimport {\n  timestampms,\n  formatPercent,\n  formatPrice,\n  humanizeDurationFromSeconds,\n} from '@/shared/formatters';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\n\nconst props = defineProps({\n  backtestResult: { required: true, type: Object as () => StrategyBacktestResult },\n});\n\nconst formatPriceStake = (price) => {\n  return `${formatPrice(price, props.backtestResult.stake_currency_decimals)} ${\n    props.backtestResult.stake_currency\n  }`;\n};\nconst getSortedTrades = (backtestResult: StrategyBacktestResult): Trade[] => {\n  const sortedTrades = backtestResult.trades\n    .slice()\n    .sort((a, b) => a.profit_ratio - b.profit_ratio);\n  return sortedTrades;\n};\n\nconst bestPair = computed((): string => {\n  const trades = getSortedTrades(props.backtestResult);\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[trades.length - 1];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n});\nconst worstPair = computed((): string => {\n  const trades = getSortedTrades(props.backtestResult);\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[0];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n});\n\nconst backtestResultStats = computed(() => {\n  // Transpose Result into readable format\n  const shortMetrics =\n    props.backtestResult?.trade_count_short && props.backtestResult?.trade_count_short > 0\n      ? [\n          { metric: '___', value: '___' },\n          {\n            metric: 'Long / Short',\n            value: `${props.backtestResult.trade_count_long} / ${props.backtestResult.trade_count_short}`,\n          },\n          {\n            metric: 'Total profit Long',\n            value: `${formatPercent(\n              props.backtestResult.profit_total_long || 0,\n            )} | ${formatPriceStake(props.backtestResult.profit_total_long_abs)}`,\n          },\n          {\n            metric: 'Total profit Short',\n            value: `${formatPercent(\n              props.backtestResult.profit_total_short || 0,\n            )} | ${formatPriceStake(props.backtestResult.profit_total_short_abs)}`,\n          },\n        ]\n      : [];\n\n  return [\n    {\n      metric: 'Total Profit',\n      value: `${formatPercent(props.backtestResult.profit_total)} | ${formatPriceStake(\n        props.backtestResult.profit_total_abs,\n      )}`,\n    },\n    {\n      metric: 'CAGR',\n      value: `${props.backtestResult.cagr ? formatPercent(props.backtestResult.cagr) : 'N/A'}`,\n    },\n    {\n      metric: 'Sortino',\n      value: `${props.backtestResult.sortino ? props.backtestResult.sortino.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Sharpe',\n      value: `${props.backtestResult.sharpe ? props.backtestResult.sharpe.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Calmar',\n      value: `${props.backtestResult.calmar ? props.backtestResult.calmar.toFixed(2) : 'N/A'}`,\n    },\n    {\n      metric: 'Expectancy',\n      value: `${\n        props.backtestResult.expectancy ? props.backtestResult.expectancy.toFixed(2) : 'N/A'\n      }`,\n    },\n    {\n      metric: 'Profit factor',\n      value: `${\n        props.backtestResult.profit_factor\n          ? formatPrice(props.backtestResult.profit_factor, 3)\n          : 'N/A'\n      }`,\n    },\n    {\n      metric: 'Total trades / Daily Avg Trades',\n      value: `${props.backtestResult.total_trades} / ${props.backtestResult.trades_per_day}`,\n    },\n    // { metric: 'First trade', value: props.backtestResult.backtest_fi },\n    // { metric: 'First trade Pair', value: props.backtestResult.backtest_best_day },\n    {\n      metric: 'Best day',\n      value: `${formatPercent(props.backtestResult.backtest_best_day, 2)} | ${formatPriceStake(\n        props.backtestResult.backtest_best_day_abs,\n      )}`,\n    },\n    {\n      metric: 'Worst day',\n      value: `${formatPercent(props.backtestResult.backtest_worst_day, 2)} | ${formatPriceStake(\n        props.backtestResult.backtest_worst_day_abs,\n      )}`,\n    },\n\n    {\n      metric: 'Win/Draw/Loss',\n      value: `${\n        props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1].wins\n      } / ${\n        props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n          .draws\n      } / ${\n        props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n          .losses\n      }`,\n    },\n    {\n      metric: 'Days win/draw/loss',\n      value: `${props.backtestResult.winning_days} / ${props.backtestResult.draw_days} / ${props.backtestResult.losing_days}`,\n    },\n\n    {\n      metric: 'Avg. Duration winners',\n      value: humanizeDurationFromSeconds(props.backtestResult.winner_holding_avg_s),\n    },\n    {\n      metric: 'Avg. Duration Losers',\n      value: humanizeDurationFromSeconds(props.backtestResult.loser_holding_avg_s),\n    },\n    { metric: 'Rejected entry signals', value: props.backtestResult.rejected_signals },\n    {\n      metric: 'Entry/Exit timeouts',\n      value: `${props.backtestResult.timedout_entry_orders} / ${props.backtestResult.timedout_exit_orders}`,\n    },\n    {\n      metric: 'Canceled Trade Entries',\n      value: props.backtestResult.canceled_trade_entries ?? 'N/A',\n    },\n    {\n      metric: 'Canceled Entry Orders',\n      value: props.backtestResult.canceled_entry_orders ?? 'N/A',\n    },\n    {\n      metric: 'Replaced Entry Orders',\n      value: props.backtestResult.replaced_entry_orders ?? 'N/A',\n    },\n\n    ...shortMetrics,\n\n    { metric: '___', value: '___' },\n    { metric: 'Min balance', value: formatPriceStake(props.backtestResult.csum_min) },\n    { metric: 'Max balance', value: formatPriceStake(props.backtestResult.csum_max) },\n    { metric: 'Market change', value: formatPercent(props.backtestResult.market_change) },\n    { metric: '___', value: '___' },\n    {\n      metric: 'Max Drawdown (Account)',\n      value: formatPercent(props.backtestResult.max_drawdown_account),\n    },\n    {\n      metric: 'Max Drawdown ABS',\n      value: formatPriceStake(props.backtestResult.max_drawdown_abs),\n    },\n    {\n      metric: 'Drawdown high | low',\n      value: `${formatPriceStake(props.backtestResult.max_drawdown_high)} | ${formatPriceStake(\n        props.backtestResult.max_drawdown_low,\n      )}`,\n    },\n    { metric: 'Drawdown start', value: timestampms(props.backtestResult.drawdown_start_ts) },\n    { metric: 'Drawdown end', value: timestampms(props.backtestResult.drawdown_end_ts) },\n    { metric: '___', value: '___' },\n\n    {\n      metric: 'Best Pair',\n      value: `${props.backtestResult.best_pair.key} ${formatPercent(\n        props.backtestResult.best_pair.profit_sum,\n      )}`,\n    },\n    {\n      metric: 'Worst Pair',\n      value: `${props.backtestResult.worst_pair.key} ${formatPercent(\n        props.backtestResult.worst_pair.profit_sum,\n      )}`,\n    },\n    { metric: 'Best single Trade', value: bestPair.value },\n    { metric: 'Worst single Trade', value: worstPair.value },\n  ];\n});\n\nconst backtestResultSettings = computed(() => {\n  // Transpose Result into readable format\n  return [\n    { setting: 'Backtesting from', value: timestampms(props.backtestResult.backtest_start_ts) },\n    { setting: 'Backtesting to', value: timestampms(props.backtestResult.backtest_end_ts) },\n    {\n      setting: 'BT execution time',\n      value: humanizeDurationFromSeconds(\n        props.backtestResult.backtest_run_end_ts - props.backtestResult.backtest_run_start_ts,\n      ),\n    },\n    { setting: 'Max open trades', value: props.backtestResult.max_open_trades },\n    { setting: 'Timeframe', value: props.backtestResult.timeframe },\n    { setting: 'Timeframe Detail', value: props.backtestResult.timeframe_detail || 'N/A' },\n    { setting: 'Timerange', value: props.backtestResult.timerange },\n    { setting: 'Stoploss', value: formatPercent(props.backtestResult.stoploss, 2) },\n    { setting: 'Trailing Stoploss', value: props.backtestResult.trailing_stop },\n    {\n      setting: 'Trail only when offset is reached',\n      value: props.backtestResult.trailing_only_offset_is_reached,\n    },\n    { setting: 'Trailing Stop positive', value: props.backtestResult.trailing_stop_positive },\n    {\n      setting: 'Trailing stop positive offset',\n      value: props.backtestResult.trailing_stop_positive_offset,\n    },\n    { setting: 'Custom Stoploss', value: props.backtestResult.use_custom_stoploss },\n    { setting: 'ROI', value: props.backtestResult.minimal_roi },\n    {\n      setting: 'Use Exit Signal',\n      value:\n        props.backtestResult.use_exit_signal !== undefined\n          ? props.backtestResult.use_exit_signal\n          : props.backtestResult.use_sell_signal,\n    },\n    {\n      setting: 'Exit profit only',\n      value:\n        props.backtestResult.exit_profit_only !== undefined\n          ? props.backtestResult.exit_profit_only\n          : props.backtestResult.sell_profit_only,\n    },\n    {\n      setting: 'Exit profit offset',\n      value:\n        props.backtestResult.exit_profit_offset !== undefined\n          ? props.backtestResult.exit_profit_offset\n          : props.backtestResult.sell_profit_offset,\n    },\n    { setting: 'Enable protections', value: props.backtestResult.enable_protections },\n    {\n      setting: 'Starting balance',\n      value: formatPriceStake(props.backtestResult.starting_balance),\n    },\n    {\n      setting: 'Final balance',\n      value: formatPriceStake(props.backtestResult.final_balance),\n    },\n    {\n      setting: 'Avg. stake amount',\n      value: formatPriceStake(props.backtestResult.avg_stake_amount),\n    },\n    {\n      setting: 'Total trade volume',\n      value: formatPriceStake(props.backtestResult.total_volume),\n    },\n  ];\n});\nconst perPairFields = computed(() => {\n  return [\n    { key: 'key', label: 'Pair' },\n    { key: 'trades', label: 'Buys' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'duration_avg', label: 'Avg Duration' },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\n\nconst perExitReason = computed(() => {\n  return [\n    { key: 'exit_reason', label: 'Exit Reason' },\n    { key: 'trades', label: 'Buys' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\n\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value, 2),\n    },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\nconst backtestResultFields: TableField[] = [\n  { key: 'metric', label: 'Metric' },\n  { key: 'value', label: 'Value' },\n];\n\nconst backtestsettingFields: TableField[] = [\n  { key: 'setting', label: 'Setting' },\n  { key: 'value', label: 'Value' },\n];\n</script>\n\n<style lang=\"scss\" scoped>\n.backtestresult-container {\n  @media (min-width: 1200px) {\n    max-width: 1200px;\n  }\n}\n</style>\n","<template>\n  <div class=\"container d-flex flex-column align-items-center\">\n    <h3>Available results:</h3>\n    <b-list-group class=\"ms-2\">\n      <b-list-group-item\n        v-for=\"[key, strat] in Object.entries(backtestHistory)\"\n        :key=\"key\"\n        button\n        :active=\"key === selectedBacktestResultKey\"\n        class=\"d-flex justify-content-between align-items-center py-1\"\n        @click=\"setBacktestResult(key)\"\n      >\n        {{ key }} {{ strat.total_trades }} {{ formatPercent(strat.profit_total) }}\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { formatPercent } from '@/shared/formatters';\nimport { StrategyBacktestResult } from '@/types';\n\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'BacktestResultSelect',\n  props: {\n    backtestHistory: {\n      required: true,\n      type: Object as () => Record<string, StrategyBacktestResult>,\n    },\n    selectedBacktestResultKey: { required: false, default: '', type: String },\n  },\n  emits: ['selectionChange'],\n  setup(_, { emit }) {\n    const setBacktestResult = (key) => {\n      emit('selectionChange', key);\n    };\n    return {\n      formatPercent,\n      setBacktestResult,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n","<template>\n  <div>\n    <div class=\"w-100 d-flex\">\n      <b-form-select\n        id=\"freqaiModel-select\"\n        v-model=\"locFreqaiModel\"\n        :options=\"botStore.activeBot.freqaiModelList\"\n      >\n      </b-form-select>\n      <div class=\"ms-2\">\n        <b-button @click=\"botStore.activeBot.getFreqAIModelList\">&#x21bb;</b-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { computed, onMounted } from 'vue';\n\nconst props = defineProps({\n  modelValue: { type: String, required: true },\n});\nconst emit = defineEmits(['update:modelValue']);\nconst botStore = useBotStore();\n\nconst locFreqaiModel = computed({\n  get() {\n    return props.modelValue;\n  },\n  set(freqaiModel: string) {\n    emit('update:modelValue', freqaiModel);\n  },\n});\n\nonMounted(() => {\n  if (botStore.activeBot.freqaiModelList.length === 0) {\n    botStore.activeBot.getFreqAIModelList();\n  }\n});\n</script>\n\n<style></style>\n","<template>\n  <div>\n    <button\n      class=\"btn btn-secondary float-end\"\n      title=\"Refresh\"\n      aria-label=\"Refresh\"\n      @click=\"botStore.activeBot.getBacktestHistory\"\n    >\n      &#x21bb;\n    </button>\n    <p>\n      Load Historic results from disk. You can click on multiple results to load all of them into\n      freqUI.\n    </p>\n    <b-list-group v-if=\"botStore.activeBot.backtestHistoryList\" class=\"ms-2\">\n      <b-list-group-item\n        v-for=\"(res, idx) in botStore.activeBot.backtestHistoryList\"\n        :key=\"idx\"\n        class=\"d-flex justify-content-between align-items-center py-1 mb-1\"\n        button\n        @click=\"botStore.activeBot.getBacktestHistoryResult(res)\"\n      >\n        <strong>{{ res.strategy }}</strong>\n        backtested on: {{ timestampms(res.backtest_start_time * 1000) }}\n        <small>{{ res.filename }}</small>\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, onMounted } from 'vue';\nimport { timestampms } from '@/shared/formatters';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  setup() {\n    const botStore = useBotStore();\n\n    onMounted(() => {\n      botStore.activeBot.getBacktestHistory();\n    });\n\n    return {\n      timestampms,\n      botStore,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n  <div>\n    <b-list-group>\n      <b-list-group-item\n        button\n        class=\"d-flex flex-wrap justify-content-center align-items-center\"\n        :title=\"'Trade Navigation'\"\n        @click=\"sortNewestFirst = !sortNewestFirst\"\n        >Trade Navigation {{ sortNewestFirst ? '&#8595;' : '&#8593;' }}\n      </b-list-group-item>\n      <b-list-group-item\n        v-for=\"trade in sortedTrades\"\n        :key=\"trade.open_timestamp\"\n        button\n        class=\"d-flex flex-wrap justify-content-between align-items-center py-1\"\n        :title=\"`${trade.pair}`\"\n        :active=\"trade.open_timestamp === selectedTrade.open_timestamp\"\n        @click=\"onTradeSelect(trade)\"\n      >\n        <div>\n          <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\n            trade.is_short ? 'S-' : 'L-'\n          }}</span>\n          <DateTimeTZ :date=\"trade.open_timestamp\" />\n        </div>\n        <TradeProfit :trade=\"trade\" />\n        <ProfitPill\n          v-if=\"backtestMode\"\n          :profit-ratio=\"trade.profit_ratio\"\n          :stake-currency=\"botStore.activeBot.stakeCurrency\"\n        />\n      </b-list-group-item>\n      <b-list-group-item v-if=\"trades.length === 0\">No trades to show...</b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Trade } from '@/types';\nimport TradeProfit from '@/components/ftbot/TradeProfit.vue';\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { computed, ref } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport DateTimeTZ from '@/components/general/DateTimeTZ.vue';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Trade[] },\n  backtestMode: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits(['trade-select']);\n\nconst botStore = useBotStore();\nconst selectedTrade = ref({} as Trade);\nconst sortNewestFirst = ref(true);\n\nconst onTradeSelect = (trade: Trade) => {\n  selectedTrade.value = trade;\n  emit('trade-select', trade);\n};\n\nconst sortedTrades = computed(() => {\n  return props.trades\n    .slice()\n    .sort((a, b) =>\n      sortNewestFirst.value\n        ? b.open_timestamp - a.open_timestamp\n        : a.open_timestamp - b.open_timestamp,\n    );\n});\n</script>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n","<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-md-11 text-start\">\n        <p>\n          Graph will always show the latest values for the selected strategy. Timerange:\n          {{ timerange }} - {{ strategy }}\n        </p>\n      </div>\n      <div class=\"col-md-1 text-end\">\n        <b-button\n          aria-label=\"Close\"\n          title=\"Trade Navigation\"\n          size=\"sm\"\n          @click=\"showRightBar = !showRightBar\"\n          >{{ showRightBar ? '&gt;' : '&lt;' }}\n        </b-button>\n      </div>\n    </div>\n    <div class=\"row text-center h-100 d-flex align-items-stretch\">\n      <PairSummary\n        class=\"col-md-2 overflow-auto\"\n        style=\"max-height: calc(100vh - 200px)\"\n        :pairlist=\"pairlist\"\n        :trades=\"trades\"\n        sort-method=\"profit\"\n        :backtest-mode=\"true\"\n      />\n      <CandleChartContainer\n        :available-pairs=\"pairlist\"\n        :historic-view=\"!!true\"\n        :timeframe=\"timeframe\"\n        :timerange=\"timerange\"\n        :strategy=\"strategy\"\n        :trades=\"trades\"\n        :class=\"`${\n          showRightBar ? 'col-md-8' : 'col-md-10'\n        } candle-chart-container px-0 h-100 align-self-stretch`\"\n        :slider-position=\"sliderPosition\"\n      >\n      </CandleChartContainer>\n      <TradeListNav\n        v-if=\"showRightBar\"\n        class=\"overflow-auto col-md-2\"\n        style=\"max-height: calc(100vh - 200px)\"\n        :trades=\"trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\n        @trade-select=\"navigateChartToTrade\"\n      />\n    </div>\n    <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n      <TradeList class=\"row trade-history mt-2 w-100\" :trades=\"trades\" :show-filter=\"true\" />\n    </b-card>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport TradeListNav from '@/components/ftbot/TradeListNav.vue';\nimport PairSummary from '@/components/ftbot/PairSummary.vue';\nimport CandleChartContainer from '@/components/charts/CandleChartContainer.vue';\nimport { ref } from 'vue';\nimport { ChartSliderPosition, Trade } from '@/types';\n\ndefineProps({\n  timeframe: { required: true, type: String },\n  strategy: { required: true, type: String },\n  timerange: { required: true, type: String },\n  pairlist: { required: true, type: Array as () => string[] },\n  trades: { required: true, type: Array as () => Trade[] },\n});\nconst botStore = useBotStore();\nconst showRightBar = ref(true);\nconst sliderPosition = ref<ChartSliderPosition>();\n\nconst navigateChartToTrade = (trade: Trade) => {\n  sliderPosition.value = {\n    startValue: trade.open_timestamp,\n    endValue: trade.close_timestamp,\n  };\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.candle-chart-container {\n  // TODO: Rough estimate - still to fix correctly\n  // Applies to all \"calc\" usages in this file.\n  height: calc(100vh - 250px) !important;\n}\n</style>\n","<template>\n  <div class=\"container-fluid\" style=\"max-height: calc(100vh - 60px)\">\n    <div class=\"container-fluid\">\n      <div class=\"row mb-2\"></div>\n      <p v-if=\"!botStore.activeBot.canRunBacktest\">\n        Bot must be in webserver mode to enable Backtesting.\n      </p>\n      <div class=\"row w-100\">\n        <h2 class=\"col-4 col-lg-3\">Backtesting</h2>\n        <div\n          class=\"col-12 col-lg-order-last col-lg-6 mx-md-5 d-flex flex-wrap justify-content-md-center justify-content-between mb-4\"\n        >\n          <b-form-radio\n            v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"historicResults\"\n            :disabled=\"!botStore.activeBot.canRunBacktest\"\n            >Load Results</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"run\"\n            :disabled=\"!botStore.activeBot.canRunBacktest\"\n            >Run backtest</b-form-radio\n          >\n          <b-form-radio\n            id=\"bt-analyze-btn\"\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"results\"\n            :disabled=\"!hasBacktestResult\"\n            >Analyze result</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"visualize-summary\"\n            :disabled=\"!hasBacktestResult\"\n            >Visualize summary</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"visualize\"\n            :disabled=\"!hasBacktestResult\"\n            >Visualize result</b-form-radio\n          >\n        </div>\n        <small\n          v-show=\"botStore.activeBot.backtestRunning\"\n          class=\"text-end bt-running-label col-8 col-lg-3\"\n          >Backtest running: {{ botStore.activeBot.backtestStep }}\n          {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\n        >\n      </div>\n    </div>\n\n    <div class=\"d-md-flex\">\n      <!-- Left bar -->\n      <div\n        :class=\"`${showLeftBar ? 'col-md-3' : ''} sticky-top sticky-offset me-3 d-flex flex-column`\"\n      >\n        <b-button\n          v-if=\"btFormMode !== 'visualize'\"\n          class=\"align-self-start\"\n          aria-label=\"Close\"\n          size=\"sm\"\n          @click=\"showLeftBar = !showLeftBar\"\n          >{{ showLeftBar ? '&lt;' : '&gt;' }}</b-button\n        >\n        <transition name=\"fade\" mode=\"in-out\">\n          <BacktestResultSelect\n            v-if=\"btFormMode !== 'visualize' && showLeftBar\"\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\n          />\n        </transition>\n      </div>\n      <!-- End Left bar -->\n      <div\n        v-if=\"btFormMode == 'historicResults'\"\n        class=\"flex-fill row d-flex flex-column bt-config\"\n      >\n        <backtest-history-load />\n      </div>\n      <div v-if=\"btFormMode == 'run'\" class=\"flex-fill row d-flex flex-column bt-config\">\n        <div class=\"mb-2\">\n          <span>Strategy</span>\n          <StrategySelect v-model=\"strategy\"></StrategySelect>\n        </div>\n        <b-card :disabled=\"botStore.activeBot.backtestRunning\">\n          <!-- Backtesting parameters -->\n          <b-form-group\n            label-cols-lg=\"2\"\n            label=\"Backtest params\"\n            label-size=\"sm\"\n            label-class=\"fw-bold pt-0\"\n            class=\"mb-0\"\n          >\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Timeframe:\"\n              label-align-sm=\"right\"\n              label-for=\"timeframe-select\"\n            >\n              <TimeframeSelect id=\"timeframe-select\" v-model=\"selectedTimeframe\" />\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Detail Timeframe:\"\n              label-align-sm=\"right\"\n              label-for=\"timeframe-detail-select\"\n              title=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\n            >\n              <TimeframeSelect\n                id=\"timeframe-detail-select\"\n                v-model=\"selectedDetailTimeframe\"\n                :below-timeframe=\"selectedTimeframe\"\n              />\n            </b-form-group>\n\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Max open trades:\"\n              label-align-sm=\"right\"\n              label-for=\"max-open-trades\"\n            >\n              <b-form-input\n                id=\"max-open-trades\"\n                v-model=\"maxOpenTrades\"\n                placeholder=\"Use strategy default\"\n                type=\"number\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Starting capital:\"\n              label-align-sm=\"right\"\n              label-for=\"starting-capital\"\n            >\n              <b-form-input\n                id=\"starting-capital\"\n                v-model=\"startingCapital\"\n                type=\"number\"\n                step=\"0.001\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Stake amount:\"\n              label-align-sm=\"right\"\n              label-for=\"stake-amount\"\n            >\n              <div class=\"d-flex\">\n                <b-form-checkbox\n                  id=\"stake-amount-bool\"\n                  v-model=\"stakeAmountUnlimited\"\n                  class=\"col-md-6\"\n                  >Unlimited stake</b-form-checkbox\n                >\n\n                <b-form-input\n                  id=\"stake-amount\"\n                  v-model=\"stakeAmount\"\n                  type=\"number\"\n                  placeholder=\"Use strategy default\"\n                  step=\"0.01\"\n                  :disabled=\"stakeAmountUnlimited\"\n                ></b-form-input>\n              </div>\n            </b-form-group>\n\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Enable Protections:\"\n              label-align-sm=\"right\"\n              label-for=\"enable-protections\"\n            >\n              <b-form-checkbox\n                id=\"enable-protections\"\n                v-model=\"enableProtections\"\n              ></b-form-checkbox>\n            </b-form-group>\n            <b-form-group\n              v-if=\"botStore.activeBot.botApiVersion >= 2.22\"\n              label-cols-sm=\"5\"\n              label=\"Cache Backtest results:\"\n              label-align-sm=\"right\"\n              label-for=\"enable-cache\"\n            >\n              <b-form-checkbox id=\"enable-cache\" v-model=\"allowCache\"></b-form-checkbox>\n            </b-form-group>\n            <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\n              <b-form-group\n                label-cols-sm=\"5\"\n                label=\"Enable FreqAI:\"\n                label-align-sm=\"right\"\n                label-for=\"enable-freqai\"\n              >\n                <template #label>\n                  <div class=\"d-flex justify-content-center\">\n                    <span class=\"me-2\">Enable FreqAI:</span>\n                    <InfoBox\n                      hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\n                    />\n                  </div>\n                </template>\n                <b-form-checkbox id=\"enable-freqai\" v-model=\"freqAI.enabled\"></b-form-checkbox>\n              </b-form-group>\n              <b-form-group\n                v-if=\"freqAI.enabled\"\n                label-cols-sm=\"5\"\n                label=\"FreqAI identifier:\"\n                label-align-sm=\"right\"\n                label-for=\"freqai-identifier\"\n              >\n                <b-form-input\n                  id=\"freqai-identifier\"\n                  v-model=\"freqAI.identifier\"\n                  placeholder=\"Use config default\"\n                ></b-form-input>\n              </b-form-group>\n              <b-form-group\n                v-if=\"freqAI.enabled\"\n                label-cols-sm=\"5\"\n                label=\"FreqAI Model\"\n                label-align-sm=\"right\"\n                label-for=\"freqai-model\"\n              >\n                <FreqaiModelSelect id=\"freqai-model\" v-model=\"freqAI.model\"></FreqaiModelSelect>\n              </b-form-group>\n            </template>\n\n            <!-- <b-form-group label-cols-sm=\"5\" label=\"Fee:\" label-align-sm=\"right\" label-for=\"fee\">\n              <b-form-input\n                id=\"fee\"\n                type=\"number\"\n                placeholder=\"Use exchange default\"\n                step=\"0.01\"\n              ></b-form-input>\n            </b-form-group> -->\n            <hr />\n            <TimeRangeSelect v-model=\"timerange\" class=\"mt-2\"></TimeRangeSelect>\n          </b-form-group>\n        </b-card>\n\n        <h3 class=\"mt-3\">Backtesting summary</h3>\n        <div\n          class=\"d-flex flex-wrap flex-md-nowrap justify-content-between justify-content-md-center\"\n        >\n          <b-button\n            id=\"start-backtest\"\n            variant=\"primary\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            class=\"mx-1\"\n            @click=\"clickBacktest\"\n          >\n            Start backtest\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            class=\"mx-1\"\n            @click=\"botStore.activeBot.pollBacktest\"\n          >\n            Load backtest result\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            class=\"mx-1\"\n            :disabled=\"!botStore.activeBot.backtestRunning\"\n            @click=\"botStore.activeBot.stopBacktest\"\n            >Stop Backtest</b-button\n          >\n          <b-button\n            variant=\"primary\"\n            class=\"mx-1\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            @click=\"botStore.activeBot.removeBacktest\"\n            >Reset Backtest</b-button\n          >\n        </div>\n      </div>\n      <BacktestResultView\n        v-if=\"hasBacktestResult && btFormMode == 'results'\"\n        :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n        class=\"flex-fill\"\n      />\n\n      <BacktestGraphsView\n        v-if=\"hasBacktestResult && btFormMode == 'visualize-summary'\"\n        :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n      />\n    </div>\n\n    <div\n      v-if=\"hasBacktestResult && btFormMode == 'visualize'\"\n      class=\"container-fluid text-center w-100 mt-2\"\n    >\n      <BacktestResultChart\n        :timeframe=\"timeframe\"\n        :strategy=\"strategy\"\n        :timerange=\"timerange\"\n        :pairlist=\"botStore.activeBot.selectedBacktestResult.pairlist\"\n        :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport TimeRangeSelect from '@/components/ftbot/TimeRangeSelect.vue';\nimport BacktestResultView from '@/components/ftbot/BacktestResultView.vue';\nimport BacktestResultSelect from '@/components/ftbot/BacktestResultSelect.vue';\nimport StrategySelect from '@/components/ftbot/StrategySelect.vue';\nimport FreqaiModelSelect from '@/components/ftbot/FreqaiModelSelect.vue';\nimport TimeframeSelect from '@/components/ftbot/TimeframeSelect.vue';\nimport BacktestHistoryLoad from '@/components/ftbot/BacktestHistoryLoad.vue';\nimport BacktestGraphsView from '@/components/ftbot/BacktestGraphsView.vue';\nimport BacktestResultChart from '@/components/ftbot/BacktestResultChart.vue';\nimport InfoBox from '@/components/general/InfoBox.vue';\n\nimport { BacktestPayload } from '@/types';\n\nimport { formatPercent } from '@/shared/formatters';\nimport { computed, ref, onMounted, watch } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst botStore = useBotStore();\n\nconst hasBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\n    : false,\n);\nconst timeframe = computed((): string => {\n  try {\n    return botStore.activeBot.selectedBacktestResult.timeframe;\n  } catch (err) {\n    return '';\n  }\n});\n\nconst strategy = ref('');\nconst selectedTimeframe = ref('');\nconst selectedDetailTimeframe = ref('');\nconst timerange = ref('');\nconst showLeftBar = ref(false);\nconst freqAI = ref({\n  enabled: false,\n  model: '',\n  identifier: '',\n});\nconst enableProtections = ref(false);\nconst stakeAmountUnlimited = ref(false);\nconst allowCache = ref(true);\nconst maxOpenTrades = ref('');\nconst stakeAmount = ref('');\nconst startingCapital = ref('');\nconst btFormMode = ref('run');\nconst pollInterval = ref<number | null>(null);\n\nconst selectBacktestResult = () => {\n  // Set parameters for this result\n  strategy.value = botStore.activeBot.selectedBacktestResult.strategy_name;\n  botStore.activeBot.getStrategy(strategy.value);\n  selectedTimeframe.value = botStore.activeBot.selectedBacktestResult.timeframe;\n  selectedDetailTimeframe.value = botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\n  timerange.value = botStore.activeBot.selectedBacktestResult.timerange;\n};\n\nwatch(\n  () => botStore.activeBot.selectedBacktestResultKey,\n  () => {\n    selectBacktestResult();\n  },\n);\n\nconst clickBacktest = () => {\n  const btPayload: BacktestPayload = {\n    strategy: strategy.value,\n    timerange: timerange.value,\n    enable_protections: enableProtections.value,\n  };\n  const openTradesInt = parseInt(maxOpenTrades.value, 10);\n  if (openTradesInt) {\n    btPayload.max_open_trades = openTradesInt;\n  }\n  if (stakeAmountUnlimited.value) {\n    btPayload.stake_amount = 'unlimited';\n  } else {\n    const stakeAmountLoc = Number(stakeAmount.value);\n    if (stakeAmountLoc) {\n      btPayload.stake_amount = stakeAmountLoc.toString();\n    }\n  }\n\n  const startingCapitalLoc = Number(startingCapital.value);\n  if (startingCapitalLoc) {\n    btPayload.dry_run_wallet = startingCapitalLoc;\n  }\n\n  if (selectedTimeframe.value) {\n    btPayload.timeframe = selectedTimeframe.value;\n  }\n  if (selectedDetailTimeframe.value) {\n    btPayload.timeframe_detail = selectedDetailTimeframe.value;\n  }\n  if (!allowCache.value) {\n    btPayload.backtest_cache = 'none';\n  }\n  if (freqAI.value.enabled) {\n    btPayload.freqaimodel = freqAI.value.model;\n    if (freqAI.value.identifier !== '') {\n      btPayload.freqai = { identifier: freqAI.value.identifier };\n    }\n  }\n\n  botStore.activeBot.startBacktest(btPayload);\n};\n\nonMounted(() => botStore.activeBot.getState());\nwatch(\n  () => botStore.activeBot.backtestRunning,\n  () => {\n    if (botStore.activeBot.backtestRunning === true) {\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\n    } else if (pollInterval.value) {\n      clearInterval(pollInterval.value);\n      pollInterval.value = null;\n    }\n  },\n);\n</script>\n\n<style lang=\"scss\" scoped>\n.bt-running-label {\n  position: absolute;\n  right: 2em;\n  margin-top: 1em;\n}\n\n.sticky-offset {\n  top: 2em;\n}\n.flex-samesize-items {\n  flex: 1 1 0;\n  @media md {\n    flex: unset;\n  }\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.bt-config {\n  @media (min-width: 992px) {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 75vw;\n  }\n}\n</style>\n"],"names":["formatPriceStake","price","formatPrice","props","getSortedTrades","backtestResult","a","b","bestPair","computed","trades","value","formatPercent","worstPair","backtestResultStats","shortMetrics","_a","_b","humanizeDurationFromSeconds","timestampms","backtestResultSettings","perPairFields","perExitReason","backtestResultFields","backtestsettingFields","_sfc_main$6","defineComponent","_","emit","key","_resolveComponent","_openBlock","_createElementBlock","_hoisted_1","_hoisted_2","_withCtx","_Fragment","_renderList","_ctx","strat","_createBlock","_component_b_list_group_item","$event","botStore","useBotStore","locFreqaiModel","freqaiModel","onMounted","_sfc_main","_createElementVNode","_cache","args","_component_b_list_group","res","idx","_toDisplayString","_createTextVNode","selectedTrade","ref","sortNewestFirst","onTradeSelect","trade","sortedTrades","showRightBar","sliderPosition","navigateChartToTrade","hasBacktestResult","timeframe","strategy","selectedTimeframe","selectedDetailTimeframe","timerange","showLeftBar","freqAI","enableProtections","stakeAmountUnlimited","allowCache","maxOpenTrades","stakeAmount","startingCapital","btFormMode","pollInterval","selectBacktestResult","watch","clickBacktest","btPayload","openTradesInt","stakeAmountLoc","startingCapitalLoc"],"mappings":"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"}