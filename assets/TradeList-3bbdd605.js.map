{"version":3,"file":"TradeList-3bbdd605.js","sources":["../../src/components/ftbot/ForceExitForm.vue","../../src/components/ftbot/TradeActionsPopover.vue","../../src/components/ftbot/TradeList.vue"],"sourcesContent":["<template>\n  <div>\n    <b-modal\n      id=\"forceexit-modal\"\n      v-model=\"model\"\n      title=\"Force exiting a trade\"\n      @show=\"resetForm\"\n      @hidden=\"resetForm\"\n      @ok=\"handleEntry\"\n    >\n      <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\n        <p>\n          <span>Exiting Trade #{{ trade.trade_id }} {{ trade.pair }}.</span>\n          <br />\n          <span>Currently owning {{ trade.amount }} {{ trade.base_currency }}</span>\n        </p>\n        <b-form-group\n          :label=\"`*Amount in ${trade.base_currency} [optional]`\"\n          label-for=\"stake-input\"\n          invalid-feedback=\"Amount must be empty or a positive number\"\n          :state=\"amount !== undefined && amount > 0\"\n        >\n          <b-form-input\n            id=\"stake-input\"\n            v-model=\"amount\"\n            type=\"number\"\n            step=\"0.000001\"\n            @keydown.enter=\"handleEntry\"\n          ></b-form-input>\n          <b-form-input\n            id=\"stake-input\"\n            v-model=\"amount\"\n            type=\"range\"\n            step=\"0.000001\"\n            min=\"0\"\n            :max=\"trade.amount\"\n            @keydown.enter=\"handleEntry\"\n          ></b-form-input>\n        </b-form-group>\n\n        <b-form-group\n          label=\"*OrderType\"\n          label-for=\"ordertype-input\"\n          invalid-feedback=\"OrderType\"\n          :state=\"ordertype !== undefined\"\n        >\n          <b-form-select\n            v-model=\"ordertype\"\n            class=\"ms-2\"\n            :options=\"['market', 'limit']\"\n            style=\"min-width: 7em\"\n            size=\"sm\"\n          >\n          </b-form-select>\n        </b-form-group>\n      </form>\n    </b-modal>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ForceSellPayload, Trade } from '@/types';\n\nimport { ref, computed } from 'vue';\n\nconst props = defineProps({\n  trade: {\n    type: Object as () => Trade,\n    required: true,\n  },\n  modelValue: { required: true, default: false, type: Boolean },\n});\nconst emit = defineEmits(['update:modelValue']);\nconst botStore = useBotStore();\n\nconst form = ref<HTMLFormElement>();\nconst amount = ref<number | undefined>(undefined);\nconst ordertype = ref('limit');\n\nconst checkFormValidity = () => {\n  const valid = form.value?.checkValidity();\n\n  return valid;\n};\n\nconst model = computed({\n  get() {\n    return props.modelValue;\n  },\n  set(value: boolean) {\n    emit('update:modelValue', value);\n  },\n});\n\nconst handleSubmit = () => {\n  // Exit when the form isn't valid\n  if (!checkFormValidity()) {\n    return;\n  }\n  // call forceentry\n  const payload: ForceSellPayload = { tradeid: String(props.trade.trade_id) };\n\n  if (ordertype.value) {\n    payload.ordertype = ordertype.value;\n  }\n  if (amount.value) {\n    payload.amount = amount.value;\n  }\n  botStore.activeBot.forceexit(payload);\n  model.value = false;\n};\nconst resetForm = () => {\n  amount.value = props.trade.amount;\n  ordertype.value =\n    botStore.activeBot.botState?.order_types?.force_exit ||\n    botStore.activeBot.botState?.order_types?.exit ||\n    'limit';\n};\n\nconst handleEntry = () => {\n  // Trigger submit handler\n  handleSubmit();\n};\n</script>\n","<script setup lang=\"ts\">\nimport { Trade } from '@/types';\nimport { ref } from 'vue';\nimport TradeActions from './TradeActions.vue';\n\ndefineProps({\n  trade: { type: Object as () => Trade, required: true },\n  id: { type: Number, required: true },\n  botApiVersion: { type: Number, required: true },\n});\nconst emit = defineEmits([\n  'forceExit',\n  'forceExitPartial',\n  'cancelOpenOrder',\n  'reloadTrade',\n  'deleteTrade',\n]);\nconst popoverOpen = ref(false);\n\nfunction forceExitHandler(item: Trade, ordertype: string | undefined = undefined) {\n  popoverOpen.value = false;\n  emit('forceExit', item, ordertype);\n}\nfunction forceExitPartialHandler(item: Trade) {\n  popoverOpen.value = false;\n  emit('forceExitPartial', item);\n}\nfunction cancelOpenOrderHandler(item: Trade) {\n  popoverOpen.value = false;\n  emit('cancelOpenOrder', item);\n}\nfunction handleReloadTrade(item: Trade) {\n  popoverOpen.value = false;\n  emit('reloadTrade', item);\n}\n</script>\n\n<template>\n  <div>\n    <b-button\n      :id=\"`btn-actions-${id}`\"\n      class=\"btn-xs\"\n      size=\"sm\"\n      title=\"Actions\"\n      @click=\"popoverOpen = !popoverOpen\"\n    >\n      <i-mdi-gesture-tap />\n    </b-button>\n    <b-popover\n      container=\"body\"\n      :target=\"`btn-actions-${id}`\"\n      :title=\"`Actions for ${trade.pair}`\"\n      triggers=\"manual\"\n      :show=\"popoverOpen\"\n      placement=\"left\"\n    >\n      <trade-actions\n        :trade=\"trade\"\n        :bot-api-version=\"botApiVersion\"\n        @force-exit=\"forceExitHandler\"\n        @force-exit-partial=\"forceExitPartialHandler\"\n        @delete-trade=\"\n          popoverOpen = false;\n          $emit('deleteTrade', trade);\n        \"\n        @cancel-open-order=\"cancelOpenOrderHandler\"\n        @reload-trade=\"handleReloadTrade\"\n      />\n      <b-button class=\"mt-1 w-100 text-start\" size=\"sm\" @click=\"popoverOpen = false\">\n        <i-mdi-cancel class=\"me-1\" />Close Actions menu\n      </b-button>\n    </b-popover>\n  </div>\n</template>\n\n<style scoped></style>\n","<template>\n  <div class=\"h-100 overflow-auto w-100\">\n    <b-table\n      ref=\"tradesTable\"\n      small\n      hover\n      stacked=\"md\"\n      :items=\"\n        trades.filter(\n          (t) =>\n            t.pair.toLowerCase().includes(filterText.toLowerCase()) ||\n            t.exit_reason?.toLowerCase().includes(filterText.toLowerCase()) ||\n            t.enter_tag?.toLowerCase().includes(filterText.toLowerCase()),\n        ) as unknown as TableItem[]\n      \"\n      :fields=\"tableFields\"\n      show-empty\n      :empty-text=\"emptyText\"\n      :per-page=\"perPage\"\n      :current-page=\"currentPage\"\n      primary-key=\"botTradeId\"\n      selectable\n      :select-head=\"false\"\n      select-mode=\"single\"\n      @row-contextmenu=\"handleContextMenuEvent\"\n      @row-clicked=\"onRowClicked\"\n      @row-selected=\"onRowSelected\"\n    >\n      <template #cell(actions)=\"{ index, item }\">\n        <TradeActionsPopover\n          :id=\"index\"\n          :trade=\"item as unknown as Trade\"\n          :bot-api-version=\"botStore.activeBot.botApiVersion\"\n          @delete-trade=\"removeTradeHandler(item as unknown as Trade)\"\n          @force-exit=\"forceExitHandler\"\n          @force-exit-partial=\"forceExitPartialHandler\"\n          @cancel-open-order=\"cancelOpenOrderHandler\"\n          @reload-trade=\"reloadTradeHandler\"\n        />\n      </template>\n      <template #cell(pair)=\"row\">\n        <span>\n          {{ `${row.item.pair}${row.item.open_order_id || row.item.has_open_orders ? '*' : ''}` }}\n        </span>\n      </template>\n      <template #cell(trade_id)=\"row\">\n        {{ row.item.trade_id }}\n        {{\n          botStore.activeBot.botApiVersion > 2.0 && row.item.trading_mode !== 'spot'\n            ? '| ' + (row.item.is_short ? 'Short' : 'Long')\n            : ''\n        }}\n      </template>\n      <template #cell(stake_amount)=\"row\">\n        {{ formatPriceWithDecimals(row.item.stake_amount) }}\n        {{ row.item.trading_mode !== 'spot' ? `(${row.item.leverage}x)` : '' }}\n      </template>\n      <template #cell(profit)=\"row\">\n        <trade-profit :trade=\"row.item as unknown as Trade\" />\n      </template>\n      <template #cell(open_timestamp)=\"row\">\n        <DateTimeTZ :date=\"(row.item as unknown as Trade).open_timestamp\" />\n      </template>\n      <template #cell(close_timestamp)=\"row\">\n        <DateTimeTZ :date=\"(row.item as unknown as Trade).close_timestamp ?? 0\" />\n      </template>\n    </b-table>\n    <div class=\"w-100 d-flex justify-content-between\">\n      <b-pagination\n        v-if=\"!activeTrades\"\n        v-model=\"currentPage\"\n        :total-rows=\"rows\"\n        :per-page=\"perPage\"\n        aria-controls=\"my-table\"\n      ></b-pagination>\n      <b-form-group v-if=\"showFilter\" label-for=\"trade-filter\">\n        <b-form-input id=\"trade-filter\" v-model=\"filterText\" type=\"text\" placeholder=\"Filter\" />\n      </b-form-group>\n    </div>\n    <force-exit-form v-if=\"activeTrades\" v-model=\"forceExitVisible\" :trade=\"feTrade\" />\n    <b-modal v-model=\"removeTradeVisible\" title=\"Exit trade\" @ok=\"forceExitExecuter\">\n      {{ confirmExitText }}\n    </b-modal>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { formatPercent, formatPrice } from '@/shared/formatters';\nimport { MultiDeletePayload, MultiForcesellPayload, Trade } from '@/types';\n\nimport { ref, computed, watch, onMounted } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { useRouter } from 'vue-router';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\n\nenum ModalReasons {\n  removeTrade,\n  forceExit,\n  forceExitPartial,\n  cancelOpenOrder,\n}\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Array<Trade> },\n  title: { default: 'Trades', type: String },\n  stakeCurrency: { required: false, default: '', type: String },\n  activeTrades: { default: false, type: Boolean },\n  showFilter: { default: false, type: Boolean },\n  multiBotView: { default: false, type: Boolean },\n  emptyText: { default: 'No Trades to show.', type: String },\n});\nconst botStore = useBotStore();\nconst router = useRouter();\nconst currentPage = ref(1);\nconst selectedItemIndex = ref();\nconst filterText = ref('');\nconst feTrade = ref<Trade>({} as Trade);\nconst perPage = props.activeTrades ? 200 : 15;\nconst tradesTable = ref<HTMLFormElement>();\nconst forceExitVisible = ref(false);\nconst removeTradeVisible = ref(false);\nconst confirmExitText = ref('');\nconst confirmExitValue = ref<ModalReasons | null>(null);\n\nconst openFields: TableField[] = [{ key: 'actions' }];\nconst closedFields: TableField[] = [\n  { key: 'close_timestamp', label: 'Close date' },\n  { key: 'exit_reason', label: 'Close Reason' },\n];\nconst formatPriceWithDecimals = (price) => {\n  return formatPrice(price, botStore.activeBot.stakeCurrencyDecimals);\n};\nconst rows = computed(() => {\n  return props.trades.length;\n});\n\n// This using \"TableField[]\" below causes\n// Error: Debug Failure. No error for last overload signature\nconst tableFields = ref<any[]>([]);\n\nonMounted(() => {\n  tableFields.value = [\n    { key: 'trade_id', label: 'ID' },\n    { key: 'pair', label: 'Pair' },\n    { key: 'amount', label: 'Amount' },\n    {\n      key: 'stake_amount',\n      label: 'Stake amount',\n    },\n    {\n      key: 'open_rate',\n      label: 'Open rate',\n      formatter: (value: unknown) => formatPrice(value as number),\n    },\n    {\n      key: props.activeTrades ? 'current_rate' : 'close_rate',\n      label: props.activeTrades ? 'Current rate' : 'Close rate',\n      formatter: (value: unknown) => formatPrice(value as number),\n    },\n    {\n      key: 'profit',\n      label: props.activeTrades ? 'Current profit %' : 'Profit %',\n      formatter: (value: unknown, key?: string, item?: unknown) => {\n        if (!item) {\n          return '';\n        }\n        const typedItem = item as Trade;\n        const percent = formatPercent(typedItem.profit_ratio, 2);\n        return `${percent} ${`(${formatPriceWithDecimals(typedItem.profit_abs)})`}`;\n      },\n    },\n    { key: 'open_timestamp', label: 'Open date' },\n    ...(props.activeTrades ? openFields : closedFields),\n  ];\n  if (props.multiBotView) {\n    tableFields.value.unshift({ key: 'botName', label: 'Bot' });\n  }\n});\n\nconst feOrderType = ref<string | undefined>(undefined);\nconst forceExitHandler = (item: Trade, ordertype: string | undefined = undefined) => {\n  feTrade.value = item;\n  confirmExitValue.value = ModalReasons.forceExit;\n  confirmExitText.value = `Really exit trade ${item.trade_id} (Pair ${item.pair}) using ${ordertype} Order?`;\n  removeTradeVisible.value = true;\n  feOrderType.value = ordertype;\n};\n\nconst forceExitExecuter = () => {\n  if (confirmExitValue.value === ModalReasons.removeTrade) {\n    const payload: MultiDeletePayload = {\n      tradeid: String(feTrade.value.trade_id),\n      botId: feTrade.value.botId,\n    };\n    botStore.deleteTradeMulti(payload).catch((error) => console.log(error.response));\n  }\n  if (confirmExitValue.value === ModalReasons.forceExit) {\n    const payload: MultiForcesellPayload = {\n      tradeid: String(feTrade.value.trade_id),\n      botId: feTrade.value.botId,\n    };\n    if (feOrderType.value) {\n      payload.ordertype = feOrderType.value;\n    }\n    botStore\n      .forceSellMulti(payload)\n      .then((xxx) => console.log(xxx))\n      .catch((error) => console.log(error.response));\n  }\n  if (confirmExitValue.value === ModalReasons.cancelOpenOrder) {\n    const payload: MultiDeletePayload = {\n      tradeid: String(feTrade.value.trade_id),\n      botId: feTrade.value.botId,\n    };\n    botStore.cancelOpenOrderMulti(payload);\n  }\n\n  feOrderType.value = undefined;\n  removeTradeVisible.value = false;\n};\n\nconst removeTradeHandler = (item: Trade) => {\n  confirmExitText.value = `Really delete trade ${item.trade_id} (Pair ${item.pair})?`;\n  confirmExitValue.value = ModalReasons.removeTrade;\n  feTrade.value = item;\n  removeTradeVisible.value = true;\n};\n\nconst forceExitPartialHandler = (item: Trade) => {\n  feTrade.value = item;\n  forceExitVisible.value = true;\n};\n\nconst cancelOpenOrderHandler = (item: Trade) => {\n  confirmExitText.value = `Cancel open order for trade ${item.trade_id} (Pair ${item.pair})?`;\n  feTrade.value = item;\n  confirmExitValue.value = ModalReasons.cancelOpenOrder;\n  removeTradeVisible.value = true;\n};\n\nfunction reloadTradeHandler(item: Trade) {\n  botStore.reloadTradeMulti({ tradeid: String(item.trade_id), botId: item.botId });\n}\n\nconst handleContextMenuEvent = (item, index, event) => {\n  // stop browser context menu from appearing\n  if (!props.activeTrades) {\n    return;\n  }\n  event.preventDefault();\n  // log the selected item to the console\n  console.log(item);\n};\n\nconst onRowClicked = (item) => {\n  if (props.multiBotView && botStore.selectedBot !== item.botId) {\n    // Multibotview - on click switch to the bot trade view\n    botStore.selectBot(item.botId);\n  }\n  if (item && item.trade_id !== botStore.activeBot.detailTradeId) {\n    botStore.activeBot.setDetailTrade(item);\n    if (props.multiBotView) {\n      router.push({ name: 'Freqtrade Trading' });\n    }\n  } else {\n    botStore.activeBot.setDetailTrade(null);\n  }\n};\n\nconst onRowSelected = () => {\n  if (botStore.activeBot.detailTradeId) {\n    const itemIndex = props.trades.findIndex(\n      (v) => v.trade_id === botStore.activeBot.detailTradeId,\n    );\n    if (itemIndex >= 0) {\n      tradesTable.value?.selectRow(itemIndex);\n    } else {\n      console.log(`Unsetting item for tradeid ${selectedItemIndex.value}`);\n      selectedItemIndex.value = undefined;\n    }\n  }\n};\n\nwatch(\n  () => botStore.activeBot.detailTradeId,\n  (val) => {\n    const index = props.trades.findIndex((v) => v.trade_id === val);\n    // Unselect when another tradeTable is selected!\n    if (index < 0) {\n      tradesTable.value?.clearSelected();\n    }\n  },\n);\n</script>\n\n<style lang=\"scss\" scoped>\n.card-body {\n  padding: 0 0.2em;\n}\n.table-sm {\n  font-size: $fontsize-small;\n}\n.btn-xs {\n  padding: 0.1rem 0.25rem;\n  font-size: 0.75rem;\n}\n</style>\n"],"names":["props","__props","emit","__emit","botStore","useBotStore","form","ref","amount","ordertype","checkFormValidity","_a","model","computed","value","handleSubmit","payload","resetForm","_b","_d","_c","handleEntry","popoverOpen","forceExitHandler","item","forceExitPartialHandler","cancelOpenOrderHandler","handleReloadTrade","router","useRouter","currentPage","selectedItemIndex","filterText","feTrade","perPage","tradesTable","forceExitVisible","removeTradeVisible","confirmExitText","confirmExitValue","openFields","closedFields","formatPriceWithDecimals","price","formatPrice","rows","tableFields","onMounted","key","typedItem","formatPercent","feOrderType","forceExitExecuter","error","xxx","removeTradeHandler","reloadTradeHandler","handleContextMenuEvent","index","event","onRowClicked","onRowSelected","itemIndex","v","watch","val"],"mappings":"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"}