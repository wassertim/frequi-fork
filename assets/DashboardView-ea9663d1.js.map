{"version":3,"file":"DashboardView-ea9663d1.js","sources":["../../src/components/ftbot/BotComparisonList.vue","../../src/views/DashboardView.vue"],"sourcesContent":["<template>\n  <b-table\n    ref=\"tradesTable\"\n    small\n    hover\n    show-empty\n    primary-key=\"botId\"\n    :items=\"tableItems\"\n    :fields=\"tableFields\"\n  >\n    <template #cell(botName)=\"row\">\n      <div class=\"d-flex flex-row\">\n        <b-form-checkbox\n          v-if=\"row.item.botId && botStore.botCount > 1\"\n          v-model=\"botStore.botStores[row.item.botId].isSelected\"\n          title=\"Show bot in Dashboard\"\n        />\n        <span>{{ row.value }}</span>\n      </div>\n    </template>\n    <template #cell(profitOpen)=\"row\">\n      <profit-pill\n        v-if=\"row.item.profitOpen && row.item.botId != 'Summary'\"\n        :profit-ratio=\"row.item.profitOpenRatio\"\n        :profit-abs=\"row.item.profitOpen\"\n        :stake-currency=\"row.item.stakeCurrency\"\n      />\n    </template>\n    <template #cell(profitClosed)=\"row\">\n      <profit-pill\n        v-if=\"row.item.profitClosed && row.item.botId != 'Summary'\"\n        :profit-ratio=\"row.item.profitClosedRatio\"\n        :profit-abs=\"row.item.profitClosed\"\n        :stake-currency=\"row.item.stakeCurrency\"\n      />\n    </template>\n\n    <template #cell(balance)=\"row\">\n      <div v-if=\"row.item.balance\">\n        <span :title=\"row.item.stakeCurrency\"\n          >{{ formatPrice(row.item.balance, row.item.stakeCurrencyDecimals) }}\n        </span>\n        <span class=\"text-small\">{{ row.item.stakeCurrency }}</span>\n      </div>\n    </template>\n    <template #cell(winVsLoss)=\"row\">\n      <div v-if=\"row.item.losses !== undefined\">\n        <span class=\"text-profit\">{{ row.item.wins }}</span> /\n        <span class=\"text-loss\">{{ row.item.losses }}</span>\n      </div>\n    </template>\n  </b-table>\n</template>\n\n<script setup lang=\"ts\">\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { formatPrice } from '@/shared/formatters';\nimport { computed } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ProfitInterface, ComparisonTableItems } from '@/types';\nimport { TableField, TableItem } from 'bootstrap-vue-next';\n\nconst sortFunction = (a: ComparisonTableItems, b: ComparisonTableItems) => {\n  if (!a.profitClosed || !b.profitClosed) return -1;\n  return a.profitClosed - b.profitClosed;\n};\n\nconst botStore = useBotStore();\n\nconst tableFields: TableField[] = [\n  { key: 'botName', label: 'Bot' },\n  { key: 'trades', label: 'Trades' },\n  { key: 'profitOpen', label: 'Open Profit' },\n  { key: 'profitClosed', label: 'Closed Profit' },\n  { key: 'balance', label: 'Balance' },\n  { key: 'winVsLoss', label: 'W/L' },\n];\n\nconst tableItems = computed<TableItem[]>(() => {\n  const val: ComparisonTableItems[] = [];\n  const summary: ComparisonTableItems = {\n    botId: undefined,\n    botName: 'Summary',\n    profitClosed: 0,\n    profitClosedRatio: undefined,\n    profitOpen: 0,\n    profitOpenRatio: undefined,\n    stakeCurrency: 'USDT',\n    wins: 0,\n    losses: 0,\n  };\n\n  Object.entries(botStore.allProfit).forEach(([k, v]: [k: string, v: ProfitInterface]) => {\n    const allStakes = botStore.allOpenTrades[k].reduce((a, b) => a + b.stake_amount, 0);\n    const profitOpenRatio =\n      botStore.allOpenTrades[k].reduce((a, b) => a + b.profit_ratio * b.stake_amount, 0) /\n      allStakes;\n    const profitOpen = botStore.allOpenTrades[k].reduce((a, b) => a + (b.profit_abs ?? 0), 0);\n\n    // TODO: handle one inactive bot ...\n    val.push({\n      botId: k,\n      botName: botStore.availableBots[k].botName,\n      trades: `${botStore.allOpenTradeCount[k]} / ${\n        botStore.allBotState[k]?.max_open_trades || 'N/A'\n      }`,\n      profitClosed: v.profit_closed_coin,\n      profitClosedRatio: v.profit_closed_ratio || 0,\n      stakeCurrency: botStore.allBotState[k]?.stake_currency || '',\n      profitOpenRatio,\n      profitOpen,\n      wins: v.winning_trades,\n      losses: v.losing_trades,\n      balance: botStore.allBalance[k]?.total_bot ?? botStore.allBalance[k]?.total,\n      stakeCurrencyDecimals: botStore.allBotState[k]?.stake_currency_decimals || 3,\n    });\n    if (v.profit_closed_coin !== undefined) {\n      summary.profitClosed += v.profit_closed_coin;\n      summary.profitOpen += v.profit_all_coin;\n      summary.wins += v.winning_trades;\n      summary.losses += v.losing_trades;\n      // summary.decimals = this.allBotState[k]?.stake_currency_decimals || summary.decimals;\n    }\n  });\n  val.sort(sortFunction);\n  val.push(summary);\n  return val as unknown as TableItem[];\n});\n</script>\n\n<style scoped></style>\n","<template>\n  <grid-layout\n    class=\"h-100 w-100\"\n    :row-height=\"50\"\n    :layout=\"gridLayoutData\"\n    :vertical-compact=\"false\"\n    :margin=\"[5, 5]\"\n    :responsive-layouts=\"responsiveGridLayouts\"\n    :is-resizable=\"!isLayoutLocked\"\n    :is-draggable=\"!isLayoutLocked\"\n    :responsive=\"true\"\n    :prevent-collision=\"true\"\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\n    :col-num=\"12\"\n    @layout-updated=\"layoutUpdatedEvent\"\n    @breakpoint-changed=\"breakpointChanged\"\n  >\n    <template #default=\"{ gridItemProps }\">\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutDaily.i\"\n        :x=\"gridLayoutDaily.x\"\n        :y=\"gridLayoutDaily.y\"\n        :w=\"gridLayoutDaily.w\"\n        :h=\"gridLayoutDaily.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer :header=\"`Daily Profit ${botStore.botCount > 1 ? 'combined' : ''}`\">\n          <DailyChart\n            v-if=\"botStore.allDailyStatsSelectedBots\"\n            :daily-stats=\"botStore.allDailyStatsSelectedBots\"\n            :show-title=\"false\"\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutBotComparison.i\"\n        :x=\"gridLayoutBotComparison.x\"\n        :y=\"gridLayoutBotComparison.y\"\n        :w=\"gridLayoutBotComparison.w\"\n        :h=\"gridLayoutBotComparison.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Bot comparison\">\n          <bot-comparison-list />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutAllOpenTrades.i\"\n        :x=\"gridLayoutAllOpenTrades.x\"\n        :y=\"gridLayoutAllOpenTrades.y\"\n        :w=\"gridLayoutAllOpenTrades.w\"\n        :h=\"gridLayoutAllOpenTrades.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer>\n          <template #header>\n            <div class=\"d-flex justify-content-center\">\n              Open Trades\n              <InfoBox\n                class=\"ms-2\"\n                hint=\"Open trades of all selected bots. Click on a trade to go to the trade page for that trade/bot.\"\n              />\n            </div>\n          </template>\n          <trade-list active-trades :trades=\"botStore.allOpenTradesSelectedBots\" multi-bot-view />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutCumChart.i\"\n        :x=\"gridLayoutCumChart.x\"\n        :y=\"gridLayoutCumChart.y\"\n        :w=\"gridLayoutCumChart.w\"\n        :h=\"gridLayoutCumChart.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Cumulative Profit\">\n          <CumProfitChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutAllClosedTrades.i\"\n        :x=\"gridLayoutAllClosedTrades.x\"\n        :y=\"gridLayoutAllClosedTrades.y\"\n        :w=\"gridLayoutAllClosedTrades.w\"\n        :h=\"gridLayoutAllClosedTrades.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer>\n          <template #header>\n            <div class=\"d-flex justify-content-center\">\n              Closed Trades\n              <InfoBox\n                class=\"ms-2\"\n                hint=\"Closed trades for all selected bots. Click on a trade to go to the trade page for that trade/bot.\"\n              />\n            </div>\n          </template>\n          <trade-list\n            :active-trades=\"false\"\n            show-filter\n            :trades=\"botStore.allClosedTradesSelectedBots\"\n            multi-bot-view\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutProfitDistribution.i\"\n        :x=\"gridLayoutProfitDistribution.x\"\n        :y=\"gridLayoutProfitDistribution.y\"\n        :w=\"gridLayoutProfitDistribution.w\"\n        :h=\"gridLayoutProfitDistribution.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Profit Distribution\">\n          <ProfitDistributionChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutTradesLogChart.i\"\n        :x=\"gridLayoutTradesLogChart.x\"\n        :y=\"gridLayoutTradesLogChart.y\"\n        :w=\"gridLayoutTradesLogChart.w\"\n        :h=\"gridLayoutTradesLogChart.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Trades Log\">\n          <TradesLogChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n        </DraggableContainer>\n      </grid-item>\n    </template>\n  </grid-layout>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue';\n\nimport DailyChart from '@/components/charts/DailyChart.vue';\nimport CumProfitChart from '@/components/charts/CumProfitChart.vue';\nimport TradesLogChart from '@/components/charts/TradesLog.vue';\nimport ProfitDistributionChart from '@/components/charts/ProfitDistributionChart.vue';\nimport BotComparisonList from '@/components/ftbot/BotComparisonList.vue';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport DraggableContainer from '@/components/layout/DraggableContainer.vue';\nimport InfoBox from '@/components/general/InfoBox.vue';\n\nimport { DashboardLayout, findGridLayout, useLayoutStore } from '@/stores/layout';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { GridItemData } from '@/types';\n\nconst botStore = useBotStore();\n\nconst layoutStore = useLayoutStore();\nconst currentBreakpoint = ref('');\n\nconst breakpointChanged = (newBreakpoint) => {\n  //   // console.log('breakpoint:', newBreakpoint);\n  currentBreakpoint.value = newBreakpoint;\n};\nconst isResizableLayout = computed(() =>\n  ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\n);\nconst isLayoutLocked = computed(() => {\n  return layoutStore.layoutLocked || !isResizableLayout.value;\n});\n\nconst gridLayoutData = computed((): GridItemData[] => {\n  if (isResizableLayout.value) {\n    return layoutStore.dashboardLayout;\n  }\n  return [...layoutStore.getDashboardLayoutSm];\n});\n\nconst layoutUpdatedEvent = (newLayout) => {\n  if (isResizableLayout.value) {\n    console.log('newlayout', newLayout);\n    console.log('saving dashboard');\n    layoutStore.dashboardLayout = newLayout;\n  }\n};\n\nconst gridLayoutDaily = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.dailyChart);\n});\n\nconst gridLayoutBotComparison = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.botComparison);\n});\n\nconst gridLayoutAllOpenTrades = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.allOpenTrades);\n});\nconst gridLayoutAllClosedTrades = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.allClosedTrades);\n});\n\nconst gridLayoutCumChart = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.cumChartChart);\n});\nconst gridLayoutProfitDistribution = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.profitDistributionChart);\n});\nconst gridLayoutTradesLogChart = computed((): GridItemData => {\n  return findGridLayout(gridLayoutData.value, DashboardLayout.tradesLogChart);\n});\n\nconst responsiveGridLayouts = computed(() => {\n  return {\n    sm: layoutStore.getDashboardLayoutSm,\n  };\n});\n\nonMounted(async () => {\n  await botStore.allGetDaily({ timescale: 30 });\n  // botStore.activeBot.getTrades();\n  botStore.activeBot.getOpenTrades();\n  botStore.activeBot.getProfit();\n});\n</script>\n\n<style scoped></style>\n"],"names":["sortFunction","a","b","botStore","useBotStore","tableFields","tableItems","computed","val","summary","k","v","allStakes","profitOpenRatio","profitOpen","_a","_b","_c","_d","_e","layoutStore","useLayoutStore","currentBreakpoint","ref","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","layoutUpdatedEvent","newLayout","gridLayoutDaily","findGridLayout","DashboardLayout","gridLayoutBotComparison","gridLayoutAllOpenTrades","gridLayoutAllClosedTrades","gridLayoutCumChart","gridLayoutProfitDistribution","gridLayoutTradesLogChart","responsiveGridLayouts","onMounted"],"mappings":"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"}