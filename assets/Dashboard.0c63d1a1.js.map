{"version":3,"file":"Dashboard.0c63d1a1.js","sources":["../../src/components/ftbot/BotComparisonList.vue","../../src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <b-table\n    ref=\"tradesTable\"\n    small\n    hover\n    show-empty\n    primary-key=\"botId\"\n    :items=\"tableItems\"\n    :fields=\"tableFields\"\n  >\n    <template #cell(botName)=\"row\">\n      <div class=\"d-flex flex-row\">\n        <b-form-checkbox\n          v-if=\"row.item.botId && botStore.botCount > 1\"\n          v-model=\"botStore.botStores[row.item.botId].isSelected\"\n          title=\"Show bot in Dashboard\"\n        />\n        <span>{{ row.value }}</span>\n      </div>\n    </template>\n    <template #cell(profitOpen)=\"row\">\n      <profit-pill\n        v-if=\"row.item.profitOpen && row.item.botId != 'Summary'\"\n        :profit-ratio=\"row.item.profitOpenRatio\"\n        :profit-abs=\"row.item.profitOpen\"\n        :stake-currency=\"row.item.stakeCurrency\"\n      />\n    </template>\n    <template #cell(profitClosed)=\"row\">\n      <profit-pill\n        v-if=\"row.item.profitClosed && row.item.botId != 'Summary'\"\n        :profit-ratio=\"row.item.profitClosedRatio\"\n        :profit-abs=\"row.item.profitClosed\"\n        :stake-currency=\"row.item.stakeCurrency\"\n      />\n    </template>\n\n    <template #cell(balance)=\"row\">\n      <div v-if=\"row.item.balance\">\n        <span :title=\"row.item.stakeCurrency\"\n          >{{ formatPrice(row.item.balance, row.item.stakeCurrencyDecimals) }}\n        </span>\n        <span class=\"text-small\">{{ row.item.stakeCurrency }}</span>\n      </div>\n    </template>\n    <template #cell(winVsLoss)=\"row\">\n      <div v-if=\"row.item.losses !== undefined\">\n        <span class=\"text-profit\">{{ row.item.wins }}</span> /\n        <span class=\"text-loss\">{{ row.item.losses }}</span>\n      </div>\n    </template>\n  </b-table>\n</template>\n\n<script lang=\"ts\">\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { formatPrice } from '@/shared/formatters';\nimport { defineComponent, computed } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ProfitInterface, ComparisonTableItems } from '@/types';\n\nexport default defineComponent({\n  name: 'BotComparisonList',\n  components: { ProfitPill },\n  setup() {\n    const botStore = useBotStore();\n\n    const tableFields: Record<string, string | Function>[] = [\n      { key: 'botName', label: 'Bot' },\n      { key: 'trades', label: 'Trades' },\n      { key: 'profitOpen', label: 'Open Profit' },\n      { key: 'profitClosed', label: 'Closed Profit' },\n      { key: 'balance', label: 'Balance' },\n      { key: 'winVsLoss', label: 'W/L' },\n    ];\n\n    const tableItems = computed(() => {\n      const val: ComparisonTableItems[] = [];\n      const summary: ComparisonTableItems = {\n        botId: undefined,\n        botName: 'Summary',\n        profitClosed: 0,\n        profitClosedRatio: undefined,\n        profitOpen: 0,\n        profitOpenRatio: undefined,\n        stakeCurrency: 'USDT',\n        wins: 0,\n        losses: 0,\n      };\n\n      Object.entries(botStore.allProfit).forEach(([k, v]: [k: string, v: ProfitInterface]) => {\n        const allStakes = botStore.allOpenTrades[k].reduce((a, b) => a + b.stake_amount, 0);\n        const profitOpenRatio =\n          botStore.allOpenTrades[k].reduce((a, b) => a + b.profit_ratio * b.stake_amount, 0) /\n          allStakes;\n        const profitOpen = botStore.allOpenTrades[k].reduce((a, b) => a + (b.profit_abs ?? 0), 0);\n\n        // TODO: handle one inactive bot ...\n        val.push({\n          botId: k,\n          botName: botStore.availableBots[k].botName,\n          trades: `${botStore.allOpenTradeCount[k]} / ${\n            botStore.allBotState[k]?.max_open_trades || 'N/A'\n          }`,\n          profitClosed: v.profit_closed_coin,\n          profitClosedRatio: v.profit_closed_ratio || 0,\n          stakeCurrency: botStore.allBotState[k]?.stake_currency || '',\n          profitOpenRatio,\n          profitOpen,\n          wins: v.winning_trades,\n          losses: v.losing_trades,\n          balance: botStore.allBalance[k]?.total,\n          stakeCurrencyDecimals: botStore.allBotState[k]?.stake_currency_decimals || 3,\n        });\n        if (v.profit_closed_coin !== undefined) {\n          summary.profitClosed += v.profit_closed_coin;\n          summary.profitOpen += v.profit_all_coin;\n          summary.wins += v.winning_trades;\n          summary.losses += v.losing_trades;\n          // summary.decimals = this.allBotState[k]?.stake_currency_decimals || summary.decimals;\n        }\n      });\n      val.push(summary);\n      return val;\n    });\n\n    return {\n      formatPrice,\n      tableFields,\n      tableItems,\n      botStore,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n","<template>\n  <grid-layout\n    class=\"h-100 w-100\"\n    :row-height=\"50\"\n    :layout=\"gridLayoutData\"\n    :vertical-compact=\"false\"\n    :margin=\"[5, 5]\"\n    :responsive-layouts=\"responsiveGridLayouts\"\n    :is-resizable=\"!isLayoutLocked\"\n    :is-draggable=\"!isLayoutLocked\"\n    :responsive=\"true\"\n    :prevent-collision=\"true\"\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\n    :col-num=\"12\"\n    @layout-updated=\"layoutUpdatedEvent\"\n    @breakpoint-changed=\"breakpointChanged\"\n  >\n    <template #default=\"{ gridItemProps }\">\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutDaily.i\"\n        :x=\"gridLayoutDaily.x\"\n        :y=\"gridLayoutDaily.y\"\n        :w=\"gridLayoutDaily.w\"\n        :h=\"gridLayoutDaily.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer :header=\"`Daily Profit ${botStore.botCount > 1 ? 'combined' : ''}`\">\n          <DailyChart\n            v-if=\"botStore.allDailyStatsSelectedBots\"\n            :daily-stats=\"botStore.allDailyStatsSelectedBots\"\n            :show-title=\"false\"\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutBotComparison.i\"\n        :x=\"gridLayoutBotComparison.x\"\n        :y=\"gridLayoutBotComparison.y\"\n        :w=\"gridLayoutBotComparison.w\"\n        :h=\"gridLayoutBotComparison.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Bot comparison\">\n          <bot-comparison-list />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutAllOpenTrades.i\"\n        :x=\"gridLayoutAllOpenTrades.x\"\n        :y=\"gridLayoutAllOpenTrades.y\"\n        :w=\"gridLayoutAllOpenTrades.w\"\n        :h=\"gridLayoutAllOpenTrades.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Open Trades\">\n          <trade-list active-trades :trades=\"botStore.allOpenTradesSelectedBots\" multi-bot-view />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutCumChart.i\"\n        :x=\"gridLayoutCumChart.x\"\n        :y=\"gridLayoutCumChart.y\"\n        :w=\"gridLayoutCumChart.w\"\n        :h=\"gridLayoutCumChart.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Cumulative Profit\">\n          <CumProfitChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutAllClosedTrades.i\"\n        :x=\"gridLayoutAllClosedTrades.x\"\n        :y=\"gridLayoutAllClosedTrades.y\"\n        :w=\"gridLayoutAllClosedTrades.w\"\n        :h=\"gridLayoutAllClosedTrades.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Closed Trades\">\n          <trade-list\n            :active-trades=\"false\"\n            show-filter\n            :trades=\"botStore.allClosedTradesSelectedBots\"\n            multi-bot-view\n          />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutProfitDistribution.i\"\n        :x=\"gridLayoutProfitDistribution.x\"\n        :y=\"gridLayoutProfitDistribution.y\"\n        :w=\"gridLayoutProfitDistribution.w\"\n        :h=\"gridLayoutProfitDistribution.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Profit Distribution\">\n          <ProfitDistributionChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n        </DraggableContainer>\n      </grid-item>\n      <grid-item\n        v-bind=\"gridItemProps\"\n        :i=\"gridLayoutTradesLogChart.i\"\n        :x=\"gridLayoutTradesLogChart.x\"\n        :y=\"gridLayoutTradesLogChart.y\"\n        :w=\"gridLayoutTradesLogChart.w\"\n        :h=\"gridLayoutTradesLogChart.h\"\n        :min-w=\"3\"\n        :min-h=\"4\"\n        drag-allow-from=\".drag-header\"\n      >\n        <DraggableContainer header=\"Trades Log\">\n          <TradesLogChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\n        </DraggableContainer>\n      </grid-item>\n    </template>\n  </grid-layout>\n</template>\n\n<script lang=\"ts\">\nimport { formatPrice } from '@/shared/formatters';\n\nimport DailyChart from '@/components/charts/DailyChart.vue';\nimport CumProfitChart from '@/components/charts/CumProfitChart.vue';\nimport TradesLogChart from '@/components/charts/TradesLog.vue';\nimport ProfitDistributionChart from '@/components/charts/ProfitDistributionChart.vue';\nimport BotComparisonList from '@/components/ftbot/BotComparisonList.vue';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport DraggableContainer from '@/components/layout/DraggableContainer.vue';\n\nimport { defineComponent, ref, computed, onMounted } from 'vue';\nimport { DashboardLayout, findGridLayout, useLayoutStore } from '@/stores/layout';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { GridItemData } from '@/types';\n\nexport default defineComponent({\n  name: 'Dashboard',\n  components: {\n    DailyChart,\n    CumProfitChart,\n    ProfitDistributionChart,\n    TradesLogChart,\n    BotComparisonList,\n    TradeList,\n    DraggableContainer,\n  },\n  setup() {\n    const botStore = useBotStore();\n\n    const layoutStore = useLayoutStore();\n    const currentBreakpoint = ref('');\n\n    const breakpointChanged = (newBreakpoint) => {\n      //   // console.log('breakpoint:', newBreakpoint);\n      currentBreakpoint.value = newBreakpoint;\n    };\n    const isResizableLayout = computed(() =>\n      ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\n    );\n    const isLayoutLocked = computed(() => {\n      return layoutStore.layoutLocked || !isResizableLayout;\n    });\n\n    const gridLayoutData = computed((): GridItemData[] => {\n      if (isResizableLayout) {\n        return layoutStore.dashboardLayout;\n      }\n      return [...layoutStore.getDashboardLayoutSm];\n    });\n\n    const layoutUpdatedEvent = (newLayout) => {\n      if (isResizableLayout) {\n        console.log('newlayout', newLayout);\n        console.log('saving dashboard');\n        layoutStore.dashboardLayout = newLayout;\n      }\n    };\n\n    const gridLayoutDaily = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.dailyChart);\n    });\n\n    const gridLayoutBotComparison = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.botComparison);\n    });\n\n    const gridLayoutAllOpenTrades = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.allOpenTrades);\n    });\n    const gridLayoutAllClosedTrades = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.allClosedTrades);\n    });\n\n    const gridLayoutCumChart = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.cumChartChart);\n    });\n    const gridLayoutProfitDistribution = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.profitDistributionChart);\n    });\n    const gridLayoutTradesLogChart = computed((): GridItemData => {\n      return findGridLayout(gridLayoutData.value, DashboardLayout.tradesLogChart);\n    });\n\n    const responsiveGridLayouts = computed(() => {\n      return {\n        sm: layoutStore.getDashboardLayoutSm,\n      };\n    });\n\n    onMounted(async () => {\n      await botStore.allGetDaily({ timescale: 30 });\n      // botStore.activeBot.getTrades();\n      botStore.activeBot.getOpenTrades();\n      botStore.activeBot.getProfit();\n    });\n\n    return {\n      botStore,\n      formatPrice,\n      isLayoutLocked,\n      layoutUpdatedEvent,\n      breakpointChanged,\n      gridLayoutData,\n      gridLayoutDaily,\n      gridLayoutBotComparison,\n      gridLayoutAllOpenTrades,\n      gridLayoutAllClosedTrades,\n      gridLayoutCumChart,\n      gridLayoutProfitDistribution,\n      gridLayoutTradesLogChart,\n      responsiveGridLayouts,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n"],"names":["_sfc_main","defineComponent","ProfitPill","botStore","useBotStore","tableFields","tableItems","computed","val","summary","k","v","allStakes","a","b","profitOpenRatio","profitOpen","_a","_b","_c","_d","formatPrice","_hoisted_1","_hoisted_4","_hoisted_6","_hoisted_7","_createBlock","_component_b_table","_ctx","_withCtx","row","_createElementVNode","_component_b_form_checkbox","$event","_createCommentVNode","_toDisplayString","_component_profit_pill","_openBlock","_createElementBlock","_hoisted_2","_hoisted_3","_hoisted_5","_createTextVNode","DailyChart","CumProfitChart","ProfitDistributionChart","TradesLogChart","BotComparisonList","TradeList","DraggableContainer","layoutStore","useLayoutStore","currentBreakpoint","ref","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","layoutUpdatedEvent","newLayout","gridLayoutDaily","findGridLayout","DashboardLayout","gridLayoutBotComparison","gridLayoutAllOpenTrades","gridLayoutAllClosedTrades","gridLayoutCumChart","gridLayoutProfitDistribution","gridLayoutTradesLogChart","responsiveGridLayouts","onMounted","_component_grid_layout","gridItemProps","_createVNode","_component_grid_item","_mergeProps","_component_DraggableContainer","_component_DailyChart","_component_bot_comparison_list","_component_trade_list","_component_CumProfitChart","_component_ProfitDistributionChart","_component_TradesLogChart"],"mappings":"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"}