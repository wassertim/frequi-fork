{"version":3,"file":"PairSummary-058e02ad.js","sources":["../../src/components/ftbot/PairSummary.vue"],"sourcesContent":["<template>\n  <b-list-group>\n    <b-list-group-item\n      v-for=\"comb in combinedPairList\"\n      :key=\"comb.pair\"\n      button\n      class=\"d-flex justify-content-between align-items-center py-1\"\n      :active=\"comb.pair === botStore.activeBot.selectedPair\"\n      :title=\"`${comb.pair} - ${comb.tradeCount} trades`\"\n      @click=\"botStore.activeBot.selectedPair = comb.pair\"\n    >\n      <div>\n        {{ comb.pair }}\n        <span v-if=\"comb.locks\" :title=\"comb.lockReason\"> &#128274; </span>\n      </div>\n\n      <TradeProfit v-if=\"comb.trade && !backtestMode\" :trade=\"comb.trade\" />\n      <ProfitPill\n        v-if=\"backtestMode && comb.tradeCount > 0\"\n        :profit-ratio=\"comb.profit\"\n        :profit-abs=\"comb.profitAbs\"\n        :stake-currency=\"botStore.activeBot.stakeCurrency\"\n      />\n    </b-list-group-item>\n  </b-list-group>\n</template>\n\n<script setup lang=\"ts\">\nimport { formatPercent, timestampms } from '@/shared/formatters';\nimport { Lock, Trade } from '@/types';\nimport TradeProfit from '@/components/ftbot/TradeProfit.vue';\nimport ProfitPill from '@/components/general/ProfitPill.vue';\nimport { computed } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\ninterface CombinedPairList {\n  pair: string;\n  lockReason: string;\n  profitString: string;\n  trade?: Trade;\n  locks?: Lock;\n  profit: number;\n  profitAbs: number;\n  tradeCount: number;\n}\n\nconst props = defineProps({\n  // TOOD: Should be string list\n  pairlist: { required: true, type: Array as () => string[] },\n  currentLocks: { required: false, type: Array as () => Lock[], default: () => [] },\n  trades: { required: true, type: Array as () => Trade[] },\n  sortMethod: { default: 'normal', type: String },\n  backtestMode: { required: false, default: false, type: Boolean },\n});\nconst botStore = useBotStore();\nconst combinedPairList = computed(() => {\n  const comb: CombinedPairList[] = [];\n\n  props.pairlist.forEach((pair) => {\n    const trades: Trade[] = props.trades.filter((el) => el.pair === pair);\n    const allLocks = props.currentLocks.filter((el) => el.pair === pair);\n    let lockReason = '';\n    let locks;\n\n    // Sort to have longer timeframe in front\n    allLocks.sort((a, b) => (a.lock_end_timestamp > b.lock_end_timestamp ? -1 : 1));\n    if (allLocks.length > 0) {\n      [locks] = allLocks;\n      lockReason = `${timestampms(locks.lock_end_timestamp)} - ${locks.reason}`;\n    }\n    let profitString = '';\n    let profit = 0;\n    let profitAbs = 0;\n    trades.forEach((trade) => {\n      profit += trade.profit_ratio;\n      profitAbs += trade.profit_abs ?? 0;\n    });\n    const tradeCount = trades.length;\n    const trade = tradeCount ? trades[0] : undefined;\n    if (trades.length > 0) {\n      profitString = `Current profit: ${formatPercent(profit)}`;\n    }\n    if (trade) {\n      profitString += `\\nOpen since: ${timestampms(trade.open_timestamp)}`;\n    }\n    comb.push({ pair, trade, locks, lockReason, profitString, profit, profitAbs, tradeCount });\n  });\n  if (props.sortMethod === 'profit') {\n    comb.sort((a, b) => {\n      if (a.profit > b.profit) {\n        return -1;\n      }\n      return 1;\n    });\n  } else {\n    // sort Pairs: \"with open trade\" -> available -> locked\n    comb.sort((a, b) => {\n      if (a.trade && !b.trade) {\n        return -1;\n      }\n      if (a.trade && b.trade) {\n        // 2 open trade pairs\n        return a.trade.trade_id > b.trade.trade_id ? 1 : -1;\n      }\n      if (!a.locks && b.locks) {\n        return -1;\n      }\n      if (a.locks && b.locks) {\n        // Both have locks\n        return a.locks.lock_end_timestamp > b.locks.lock_end_timestamp ? 1 : -1;\n      }\n      return 1;\n    });\n  }\n  return comb;\n});\n</script>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n"],"names":["botStore","useBotStore","combinedPairList","computed","comb","props","pair","trades","el","allLocks","lockReason","locks","b","timestampms","profitString","profit","profitAbs","trade","tradeCount","formatPercent","a"],"mappings":"2eAsDMA,EAAWC,IACXC,EAAmBC,EAAS,IAAM,CACtC,MAAMC,EAA2B,CAAA,EAE3B,OAAAC,EAAA,SAAS,QAASC,GAAS,CACzB,MAAAC,EAAkBF,EAAM,OAAO,OAAQG,GAAOA,EAAG,OAASF,CAAI,EAC9DG,EAAWJ,EAAM,aAAa,OAAQG,GAAOA,EAAG,OAASF,CAAI,EACnE,IAAII,EAAa,GACbC,EAGKF,EAAA,KAAK,CAAC,EAAGG,IAAO,EAAE,mBAAqBA,EAAE,mBAAqB,GAAK,CAAE,EAC1EH,EAAS,OAAS,IACpB,CAACE,CAAK,EAAIF,EACVC,EAAa,GAAGG,EAAYF,EAAM,kBAAkB,OAAOA,EAAM,UAEnE,IAAIG,EAAe,GACfC,EAAS,EACTC,EAAY,EACTT,EAAA,QAASU,GAAU,CACxBF,GAAUE,EAAM,aAChBD,GAAaC,EAAM,YAAc,CAAA,CAClC,EACD,MAAMC,EAAaX,EAAO,OACpBU,EAAQC,EAAaX,EAAO,CAAC,EAAI,OACnCA,EAAO,OAAS,IACHO,EAAA,mBAAmBK,EAAcJ,CAAM,KAEpDE,IACcH,GAAA;AAAA,cAAiBD,EAAYI,EAAM,cAAc,KAE9Db,EAAA,KAAK,CAAE,KAAAE,EAAM,MAAAW,EAAO,MAAAN,EAAO,WAAAD,EAAY,aAAAI,EAAc,OAAAC,EAAQ,UAAAC,EAAW,WAAAE,CAAY,CAAA,CAAA,CAC1F,EACGb,EAAM,aAAe,SAClBD,EAAA,KAAK,CAACgB,EAAGR,IACRQ,EAAE,OAASR,EAAE,OACR,GAEF,CACR,EAGIR,EAAA,KAAK,CAACgB,EAAGR,IACRQ,EAAE,OAAS,CAACR,EAAE,MACT,GAELQ,EAAE,OAASR,EAAE,MAERQ,EAAE,MAAM,SAAWR,EAAE,MAAM,SAAW,EAAI,GAE/C,CAACQ,EAAE,OAASR,EAAE,MACT,GAELQ,EAAE,OAASR,EAAE,MAERQ,EAAE,MAAM,mBAAqBR,EAAE,MAAM,mBAAqB,EAAI,GAEhE,CACR,EAEIR,CAAA,CACR"}