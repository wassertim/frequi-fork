{"version":3,"file":"TradesLog-779ce894.js","sources":["../../src/shared/charts/binCount.ts","../../src/components/charts/ProfitDistributionChart.vue","../../src/components/charts/CumProfitChart.vue","../../src/components/charts/TradesLog.vue"],"sourcesContent":["export function binData(data: number[], bins: number) {\n  const minimum = Math.min(...data);\n  const maximum = Math.max(...data);\n  const binSize = ((maximum - minimum) * 1.01) / bins;\n  // console.log(`data ranges from ${minimum} to ${maximum}, binsize ${binSize}`);\n  // Count occurances an array with [bucketStart, count in this bucket]\n  const baseBins = [...Array(bins).keys()].map((i) => [\n    Math.round((minimum + i * binSize) * 1000) / 1000,\n    0,\n  ]);\n\n  // console.log(baseBins);\n  for (let i = 0; i < data.length; i++) {\n    const index = Math.min(Math.floor((data[i] - minimum) / binSize), bins - 1);\n    if (!isNaN(index)) {\n      baseBins[index][1]++;\n    }\n  }\n\n  return baseBins;\n}\n","<template>\n  <div class=\"d-flex flex-column h-100 position-relative\">\n    <div class=\"flex-grow-1 order-2\">\n      <v-chart v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\n    </div>\n    <b-form-group\n      class=\"w-25 order-1\"\n      :class=\"showTitle ? 'ms-5 ps-5' : 'position-absolute'\"\n      label=\"Bins\"\n      label-for=\"input-bins\"\n      label-cols=\"6\"\n      content-cols=\"6\"\n      size=\"sm\"\n    >\n      <b-form-select\n        id=\"input-bins\"\n        v-model=\"settingsStore.profitDistributionBins\"\n        size=\"sm\"\n        :options=\"binOptions\"\n      ></b-form-select>\n    </b-form-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue';\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade } from '@/types';\nimport { binData } from '@/shared/charts/binCount';\nimport { useSettingsStore } from '@/stores/settings';\n\nuse([\n  BarChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Trade count';\n\nexport default defineComponent({\n  name: 'ProfitDistributionChart',\n  components: {\n    'v-chart': ECharts,\n  },\n  props: {\n    trades: { required: true, type: Array as () => ClosedTrade[] },\n    showTitle: { default: true, type: Boolean },\n  },\n  setup(props) {\n    const settingsStore = useSettingsStore();\n    // registerTransform(ecStat.transform.histogram);\n    // console.log(profits);\n    // const data = [[]];\n    const binOptions = [10, 15, 20, 25, 50];\n    const data = computed(() => {\n      const profits = props.trades.map((trade) => trade.profit_ratio);\n\n      return binData(profits, settingsStore.profitDistributionBins);\n    });\n\n    const chartOptions = computed((): EChartsOption => {\n      const chartOptionsLoc: EChartsOption = {\n        title: {\n          text: 'Profit distribution',\n          show: props.showTitle,\n        },\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        dataset: {\n          source: data.value,\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line',\n            label: {\n              backgroundColor: '#6a7985',\n            },\n          },\n        },\n        legend: {\n          data: [CHART_PROFIT],\n          right: '5%',\n        },\n        xAxis: {\n          type: 'category',\n          name: 'Profit %',\n          nameLocation: 'middle',\n          nameGap: 25,\n        },\n        yAxis: [\n          {\n            type: 'value',\n            name: CHART_PROFIT,\n            splitLine: {\n              show: false,\n            },\n            nameRotate: 90,\n            nameLocation: 'middle',\n            nameGap: 35,\n            position: 'left',\n          },\n        ],\n        // grid: {\n        // bottom: 80,\n        // },\n\n        series: [\n          {\n            type: 'bar',\n            name: CHART_PROFIT,\n            animation: true,\n            encode: {\n              x: 'x0',\n              y: 'y0',\n            },\n\n            // symbol: 'none',\n          },\n        ],\n      };\n      return chartOptionsLoc;\n    });\n    // console.log(chartOptions);\n    return { settingsStore, chartOptions, binOptions };\n  },\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","<template>\n  <v-chart v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\n</template>\n\n<script lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade, CumProfitData, CumProfitDataPerDate } from '@/types';\nimport { defineComponent, computed, ComputedRef } from 'vue';\nimport { useSettingsStore } from '@/stores/settings';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit';\n\nexport default defineComponent({\n  name: 'CumProfitChart',\n  components: {\n    'v-chart': ECharts,\n  },\n  props: {\n    trades: { required: true, type: Array as () => ClosedTrade[] },\n    showTitle: { default: true, type: Boolean },\n    profitColumn: { default: 'profit_abs', type: String },\n  },\n  setup(props) {\n    const settingsStore = useSettingsStore();\n    // const botList = ref<string[]>([]);\n    // const cumulativeData = ref<{ date: number; profit: any }[]>([]);\n\n    const cumulativeData: ComputedRef<{ date: number; profit: number }[]> = computed(() => {\n      const res: CumProfitData[] = [];\n      const resD: CumProfitDataPerDate = {};\n      const closedTrades = props.trades\n        .slice()\n        .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n      let profit = 0.0;\n\n      for (let i = 0, len = closedTrades.length; i < len; i += 1) {\n        const trade = closedTrades[i];\n\n        if (trade.close_timestamp && trade[props.profitColumn]) {\n          profit += trade[props.profitColumn];\n          if (!resD[trade.close_timestamp]) {\n            // New timestamp\n            resD[trade.close_timestamp] = { profit, [trade.botId]: profit };\n          } else {\n            // Add to existing profit\n            resD[trade.close_timestamp].profit += trade[props.profitColumn];\n            if (resD[trade.close_timestamp][trade.botId]) {\n              resD[trade.close_timestamp][trade.botId] += trade[props.profitColumn];\n            } else {\n              resD[trade.close_timestamp][trade.botId] = profit;\n            }\n          }\n          res.push({ date: trade.close_timestamp, profit, [trade.botId]: profit });\n        }\n      }\n      // console.log(resD);\n\n      return Object.entries(resD).map(([k, v]) => {\n        const obj = { date: parseInt(k, 10), profit: v.profit };\n        // TODO: The below could allow \"lines\" per bot\"\n        // this.botList.forEach((botId) => {\n        // obj[botId] = v[botId];\n        // });\n        return obj;\n      });\n    });\n\n    const chartOptions = computed((): EChartsOption => {\n      const chartOptionsLoc: EChartsOption = {\n        title: {\n          text: 'Cumulative Profit',\n          show: props.showTitle,\n        },\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        dataset: {\n          dimensions: ['date', 'profit'],\n          source: cumulativeData.value,\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line',\n            label: {\n              backgroundColor: '#6a7985',\n            },\n          },\n        },\n        legend: {\n          data: [CHART_PROFIT],\n          right: '5%',\n        },\n        useUTC: false,\n        xAxis: {\n          type: 'time',\n        },\n        yAxis: [\n          {\n            type: 'value',\n            name: CHART_PROFIT,\n            splitLine: {\n              show: false,\n            },\n            nameRotate: 90,\n            nameLocation: 'middle',\n            nameGap: 40,\n          },\n        ],\n        grid: {\n          bottom: 80,\n        },\n        dataZoom: [\n          {\n            type: 'inside',\n            // xAxisIndex: [0],\n            start: 0,\n            end: 100,\n          },\n          {\n            show: true,\n            // xAxisIndex: [0],\n            type: 'slider',\n            bottom: 10,\n            start: 0,\n            end: 100,\n          },\n        ],\n        series: [\n          {\n            type: 'line',\n            name: CHART_PROFIT,\n            animation: true,\n            step: 'end',\n            lineStyle: {\n              color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n            },\n            itemStyle: {\n              color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n            },\n            // symbol: 'none',\n          },\n        ],\n      };\n      // TODO: maybe have profit lines per bot?\n      // this.botList.forEach((botId: string) => {\n      //   console.log('bot', botId);\n      //   chartOptionsLoc.series.push({\n      //     type: 'line',\n      //     name: botId,\n      //     animation: true,\n      //     step: 'end',\n      //     lineStyle: {\n      //       color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n      //     },\n      //     itemStylesettingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n      //     },\n      //     // symbol: 'none',\n      //   });\n      // });\n      return chartOptionsLoc;\n    });\n\n    return { settingsStore, cumulativeData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","<template>\n  <v-chart\n    v-if=\"trades.length > 0\"\n    :option=\"chartOptions\"\n    autoresize\n    :theme=\"settingsStore.chartTheme\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade } from '@/types';\nimport { useSettingsStore } from '@/stores/settings';\nimport { defineComponent, computed } from 'vue';\nimport { timestampms } from '@/shared/formatters';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit %';\nconst CHART_COLOR = '#9be0a8';\n\nexport default defineComponent({\n  name: 'TradesLogChart',\n  components: {\n    'v-chart': ECharts,\n  },\n  props: {\n    trades: { required: true, type: Array as () => ClosedTrade[] },\n    showTitle: { default: true, type: Boolean },\n  },\n  setup(props) {\n    const settingsStore = useSettingsStore();\n    const chartData = computed(() => {\n      const res: (number | string)[][] = [];\n      const sortedTrades = props.trades\n        .slice(0)\n        .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n      for (let i = 0, len = sortedTrades.length; i < len; i += 1) {\n        const trade = sortedTrades[i];\n        const entry = [\n          i,\n          (trade.profit_ratio * 100).toFixed(2),\n          trade.pair,\n          trade.botName,\n          timestampms(trade.close_timestamp),\n          trade.is_short === undefined || !trade.is_short ? 'Long' : 'Short',\n        ];\n        res.push(entry);\n      }\n      return res;\n    });\n\n    const chartOptions = computed((): EChartsOption => {\n      // const { chartData } = this;\n      // Show a maximum of 50 trades by default - allowing to zoom out further.\n      const datazoomStart =\n        chartData.value.length > 0 ? (1 - 50 / chartData.value.length) * 100 : 100;\n      return {\n        title: {\n          text: 'Trades log',\n          show: props.showTitle,\n        },\n        backgroundColor: 'rgba(0, 0, 0, 0)',\n        dataset: {\n          dimensions: ['date', 'profit'],\n          source: chartData.value,\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: (params) => {\n            const botName = params[0].data[3] ? ` | ${params[0].data[3]}` : '';\n            return `${params[0].data[2]} | ${params[0].data[5]} ${botName}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\n          },\n          axisPointer: {\n            type: 'line',\n            label: {\n              backgroundColor: '#6a7985',\n            },\n          },\n        },\n        xAxis: {\n          type: 'value',\n          show: false,\n        },\n        yAxis: [\n          {\n            type: 'value',\n            name: CHART_PROFIT,\n            splitLine: {\n              show: false,\n            },\n            nameRotate: 90,\n            nameLocation: 'middle',\n            nameGap: 30,\n          },\n        ],\n        grid: {\n          bottom: 80,\n        },\n        dataZoom: [\n          {\n            type: 'inside',\n            start: datazoomStart,\n            end: 100,\n          },\n          {\n            show: true,\n            type: 'slider',\n            bottom: 10,\n            start: datazoomStart,\n            end: 100,\n          },\n        ],\n        visualMap: [\n          {\n            show: true,\n            seriesIndex: 0,\n            pieces: [\n              {\n                max: 0.0,\n                color: '#f84960',\n              },\n              {\n                min: 0.0,\n                color: '#2ed191',\n              },\n            ],\n          },\n        ],\n        series: [\n          {\n            type: 'bar',\n            name: CHART_PROFIT,\n            barGap: '0%',\n            barCategoryGap: '0%',\n            animation: false,\n            label: {\n              show: true,\n              position: 'top',\n              rotate: 90,\n              offset: [7.5, 7.5],\n              formatter: '{@[1]} %',\n              color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : '#3c3c3c',\n            },\n            encode: {\n              x: 0,\n              y: 1,\n            },\n\n            itemStyle: {\n              color: CHART_COLOR,\n            },\n          },\n        ],\n      };\n    });\n\n    return { settingsStore, chartData, chartOptions };\n  },\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n"],"names":["binData","data","bins","minimum","binSize","baseBins","i","index","use","BarChart","CanvasRenderer","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","CHART_PROFIT","_sfc_main$2","defineComponent","ECharts","props","settingsStore","useSettingsStore","binOptions","computed","profits","trade","chartOptions","_resolveComponent","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","_createBlock","_component_v_chart","_createCommentVNode","_component_b_form_group","_withCtx","_createVNode","_component_b_form_select","_cache","$event","LineChart","_sfc_main$1","cumulativeData","res","resD","closedTrades","a","b","profit","len","k","v","VisualMapComponent","VisualMapPiecewiseComponent","CHART_COLOR","_sfc_main","chartData","sortedTrades","entry","timestampms","datazoomStart","params","botName"],"mappings":"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"}